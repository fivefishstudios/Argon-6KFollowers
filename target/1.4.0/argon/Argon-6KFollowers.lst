
/Users/rueloquindo/Projects/LearnParticle/Argon-6KFollowers/Argon-6KFollowers/target/1.4.0/argon/Argon-6KFollowers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002144  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000161f4  2**0
                  CONTENTS
  4 .data         00000068  2003e464  000d6160  0000e464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000324  2003e4cc  2003e4cc  0001e4cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d61c8  000d61c8  000161c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d61f0  000d61f0  000161f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cc75b  00000000  00000000  000161f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f262  00000000  00000000  000e294f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b810  00000000  00000000  000f1bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a8  00000000  00000000  0010d3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000042b8  00000000  00000000  0010f769  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033005  00000000  00000000  00113a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023e78  00000000  00000000  00146a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103fae  00000000  00000000  0016a89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c83c  00000000  00000000  0026e84c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe58 	bl	d5ce2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe5d 	bl	d5cf8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e464 	.word	0x2003e464
   d4048:	000d6160 	.word	0x000d6160
   d404c:	2003e4cc 	.word	0x2003e4cc
   d4050:	2003e4cc 	.word	0x2003e4cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc7d 	bl	d5958 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6158 	.word	0x000d6158
   d4080:	000d611c 	.word	0x000d611c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b818 	b.w	d40b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc2f 	b.w	d58f4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba41 	b.w	d451c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 ba3f 	b.w	d451c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 ba45 	b.w	d452c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 ba43 	b.w	d452c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:

int followers = 0;
char buffer[10];

// setup() runs once, when the device is first turned on.
void setup() {
   d40b8:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d40ba:	f001 fb99 	bl	d57f0 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 fb89 	bl	d57d8 <_ZN9USBSerial5beginEl>
  Serial.println("Hello Instagram!");
   d40c6:	f001 fb93 	bl	d57f0 <_Z16_fetch_usbserialv>
   d40ca:	490e      	ldr	r1, [pc, #56]	; (d4104 <setup+0x4c>)
   d40cc:	f000 fecd 	bl	d4e6a <_ZN5Print7printlnEPKc>
  for (int followers=0; followers < 6001; followers++) {
   d40d0:	2400      	movs	r4, #0
    sprintf(buffer, "%d", followers);
   d40d2:	4622      	mov	r2, r4
   d40d4:	490c      	ldr	r1, [pc, #48]	; (d4108 <setup+0x50>)
   d40d6:	480d      	ldr	r0, [pc, #52]	; (d410c <setup+0x54>)
   d40d8:	f000 fa30 	bl	d453c <sprintf>
    Serial.println(buffer);
   d40dc:	f001 fb88 	bl	d57f0 <_Z16_fetch_usbserialv>
   d40e0:	490a      	ldr	r1, [pc, #40]	; (d410c <setup+0x54>)
   d40e2:	f000 fec2 	bl	d4e6a <_ZN5Print7printlnEPKc>
    Mesh.publish("igfollowers", buffer);
   d40e6:	4a09      	ldr	r2, [pc, #36]	; (d410c <setup+0x54>)
   d40e8:	4909      	ldr	r1, [pc, #36]	; (d4110 <setup+0x58>)
   d40ea:	480a      	ldr	r0, [pc, #40]	; (d4114 <setup+0x5c>)
   d40ec:	f000 fd44 	bl	d4b78 <_ZN5spark11MeshPublish7publishEPKcS2_>
    delay(50);
   d40f0:	2032      	movs	r0, #50	; 0x32
   d40f2:	f000 fa33 	bl	d455c <delay>
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  Serial.println("Hello Instagram!");
  for (int followers=0; followers < 6001; followers++) {
   d40f6:	3401      	adds	r4, #1
   d40f8:	f241 7371 	movw	r3, #6001	; 0x1771
   d40fc:	429c      	cmp	r4, r3
   d40fe:	d1e8      	bne.n	d40d2 <setup+0x1a>
    sprintf(buffer, "%d", followers);
    Serial.println(buffer);
    Mesh.publish("igfollowers", buffer);
    delay(50);
  }
}
   d4100:	bd10      	pop	{r4, pc}
   d4102:	bf00      	nop
   d4104:	000d5d94 	.word	0x000d5d94
   d4108:	000d5f31 	.word	0x000d5f31
   d410c:	2003e4d0 	.word	0x2003e4d0
   d4110:	000d5da5 	.word	0x000d5da5
   d4114:	2003e4f4 	.word	0x2003e4f4

000d4118 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4118:	4770      	bx	lr

000d411a <_GLOBAL__sub_I_followers>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d411a:	f000 b861 	b.w	d41e0 <HAL_Pin_Map>
	...

000d4120 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4120:	b508      	push	{r3, lr}
   d4122:	4b02      	ldr	r3, [pc, #8]	; (d412c <os_thread_create+0xc>)
   d4124:	681b      	ldr	r3, [r3, #0]
   d4126:	685b      	ldr	r3, [r3, #4]
   d4128:	9301      	str	r3, [sp, #4]
   d412a:	bd08      	pop	{r3, pc}
   d412c:	00030248 	.word	0x00030248

000d4130 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4130:	b508      	push	{r3, lr}
   d4132:	4b02      	ldr	r3, [pc, #8]	; (d413c <os_thread_is_current+0xc>)
   d4134:	681b      	ldr	r3, [r3, #0]
   d4136:	689b      	ldr	r3, [r3, #8]
   d4138:	9301      	str	r3, [sp, #4]
   d413a:	bd08      	pop	{r3, pc}
   d413c:	00030248 	.word	0x00030248

000d4140 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4140:	b508      	push	{r3, lr}
   d4142:	4b02      	ldr	r3, [pc, #8]	; (d414c <os_thread_join+0xc>)
   d4144:	681b      	ldr	r3, [r3, #0]
   d4146:	691b      	ldr	r3, [r3, #16]
   d4148:	9301      	str	r3, [sp, #4]
   d414a:	bd08      	pop	{r3, pc}
   d414c:	00030248 	.word	0x00030248

000d4150 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4150:	b508      	push	{r3, lr}
   d4152:	4b02      	ldr	r3, [pc, #8]	; (d415c <os_thread_cleanup+0xc>)
   d4154:	681b      	ldr	r3, [r3, #0]
   d4156:	695b      	ldr	r3, [r3, #20]
   d4158:	9301      	str	r3, [sp, #4]
   d415a:	bd08      	pop	{r3, pc}
   d415c:	00030248 	.word	0x00030248

000d4160 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4160:	b508      	push	{r3, lr}
   d4162:	4b02      	ldr	r3, [pc, #8]	; (d416c <os_mutex_create+0xc>)
   d4164:	681b      	ldr	r3, [r3, #0]
   d4166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4168:	9301      	str	r3, [sp, #4]
   d416a:	bd08      	pop	{r3, pc}
   d416c:	00030248 	.word	0x00030248

000d4170 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4170:	b508      	push	{r3, lr}
   d4172:	4b02      	ldr	r3, [pc, #8]	; (d417c <os_mutex_recursive_create+0xc>)
   d4174:	681b      	ldr	r3, [r3, #0]
   d4176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4178:	9301      	str	r3, [sp, #4]
   d417a:	bd08      	pop	{r3, pc}
   d417c:	00030248 	.word	0x00030248

000d4180 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4180:	b508      	push	{r3, lr}
   d4182:	4b02      	ldr	r3, [pc, #8]	; (d418c <os_mutex_recursive_lock+0xc>)
   d4184:	681b      	ldr	r3, [r3, #0]
   d4186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4188:	9301      	str	r3, [sp, #4]
   d418a:	bd08      	pop	{r3, pc}
   d418c:	00030248 	.word	0x00030248

000d4190 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <os_mutex_recursive_unlock+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030248 	.word	0x00030248

000d41a0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <os_thread_exit+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030248 	.word	0x00030248

000d41b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <HAL_RNG_GetRandomNumber+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	685b      	ldr	r3, [r3, #4]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030218 	.word	0x00030218

000d41c0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <HAL_Delay_Milliseconds+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	689b      	ldr	r3, [r3, #8]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030218 	.word	0x00030218

000d41d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	695b      	ldr	r3, [r3, #20]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030218 	.word	0x00030218

000d41e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_Pin_Map+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	681b      	ldr	r3, [r3, #0]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	0003022c 	.word	0x0003022c

000d41f0 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <if_name_to_index+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	691b      	ldr	r3, [r3, #16]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	0003026c 	.word	0x0003026c

000d4200 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <if_index_to_name+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	695b      	ldr	r3, [r3, #20]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	0003026c 	.word	0x0003026c

000d4210 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <if_get_by_index+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	699b      	ldr	r3, [r3, #24]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	0003026c 	.word	0x0003026c

000d4220 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <if_get_addrs+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	0003026c 	.word	0x0003026c

000d4230 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <if_free_if_addrs+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	0003026c 	.word	0x0003026c

000d4240 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <inet_inet_ntop+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	695b      	ldr	r3, [r3, #20]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030264 	.word	0x00030264

000d4250 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <inet_inet_pton+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	699b      	ldr	r3, [r3, #24]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030264 	.word	0x00030264

000d4260 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <inet_htonl+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	6a1b      	ldr	r3, [r3, #32]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030264 	.word	0x00030264

000d4270 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <inet_ntohs+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030264 	.word	0x00030264

000d4280 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <inet_htons+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030264 	.word	0x00030264

000d4290 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <netdb_freeaddrinfo+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	689b      	ldr	r3, [r3, #8]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030268 	.word	0x00030268

000d42a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <netdb_getaddrinfo+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	68db      	ldr	r3, [r3, #12]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030268 	.word	0x00030268

000d42b0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <sock_bind+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	685b      	ldr	r3, [r3, #4]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030238 	.word	0x00030238

000d42c0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <sock_setsockopt+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	699b      	ldr	r3, [r3, #24]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030238 	.word	0x00030238

000d42d0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <sock_close+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	69db      	ldr	r3, [r3, #28]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030238 	.word	0x00030238

000d42e0 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <sock_recvfrom+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030238 	.word	0x00030238

000d42f0 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <sock_sendto+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030238 	.word	0x00030238

000d4300 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <sock_socket+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030238 	.word	0x00030238

000d4310 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_SPI_Init+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	69db      	ldr	r3, [r3, #28]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030230 	.word	0x00030230

000d4320 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_USART_Init+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	681b      	ldr	r3, [r3, #0]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USART_Write_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	68db      	ldr	r3, [r3, #12]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USART_Available_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	691b      	ldr	r3, [r3, #16]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003023c 	.word	0x0003023c

000d4350 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USART_Read_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	695b      	ldr	r3, [r3, #20]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003023c 	.word	0x0003023c

000d4360 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USART_Peek_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	699b      	ldr	r3, [r3, #24]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003023c 	.word	0x0003023c

000d4370 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USART_Flush_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	69db      	ldr	r3, [r3, #28]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003023c 	.word	0x0003023c

000d4380 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USART_Available_Data_For_Write+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003023c 	.word	0x0003023c

000d4390 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Init+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	681b      	ldr	r3, [r3, #0]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Begin+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	685b      	ldr	r3, [r3, #4]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Available_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	691b      	ldr	r3, [r3, #16]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_USB_USART_Receive_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	699b      	ldr	r3, [r3, #24]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003024c 	.word	0x0003024c

000d43e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_USB_USART_Send_Data+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	69db      	ldr	r3, [r3, #28]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003024c 	.word	0x0003024c

000d43f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USB_USART_Flush_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6a1b      	ldr	r3, [r3, #32]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003024c 	.word	0x0003024c

000d4400 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <log_message+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030260 	.word	0x00030260

000d4410 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <set_system_mode+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	685b      	ldr	r3, [r3, #4]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030220 	.word	0x00030220

000d4420 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <system_delay_ms+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030220 	.word	0x00030220

000d4430 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b03      	ldr	r3, [pc, #12]	; (d4440 <system_ctrl_set_app_request_handler+0x10>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d443a:	9301      	str	r3, [sp, #4]
   d443c:	bd08      	pop	{r3, pc}
   d443e:	0000      	.short	0x0000
   d4440:	00030220 	.word	0x00030220

000d4444 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b03      	ldr	r3, [pc, #12]	; (d4454 <system_ctrl_set_result+0x10>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d444e:	9301      	str	r3, [sp, #4]
   d4450:	bd08      	pop	{r3, pc}
   d4452:	0000      	.short	0x0000
   d4454:	00030220 	.word	0x00030220

000d4458 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b03      	ldr	r3, [pc, #12]	; (d4468 <system_invoke_event_handler+0x10>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4462:	9301      	str	r3, [sp, #4]
   d4464:	bd08      	pop	{r3, pc}
   d4466:	0000      	.short	0x0000
   d4468:	00030220 	.word	0x00030220

000d446c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030244 	.word	0x00030244

000d447c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <network_connect+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	685b      	ldr	r3, [r3, #4]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030240 	.word	0x00030240

000d448c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <network_connecting+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	689b      	ldr	r3, [r3, #8]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030240 	.word	0x00030240

000d449c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <network_disconnect+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	68db      	ldr	r3, [r3, #12]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030240 	.word	0x00030240

000d44ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <network_ready+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	691b      	ldr	r3, [r3, #16]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030240 	.word	0x00030240

000d44bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <network_on+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	695b      	ldr	r3, [r3, #20]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030240 	.word	0x00030240

000d44cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <network_off+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	699b      	ldr	r3, [r3, #24]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030240 	.word	0x00030240

000d44dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <network_listen+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	69db      	ldr	r3, [r3, #28]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030240 	.word	0x00030240

000d44ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <network_listening+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6a1b      	ldr	r3, [r3, #32]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030240 	.word	0x00030240

000d44fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <network_set_listen_timeout+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030240 	.word	0x00030240

000d450c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <network_get_listen_timeout+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030240 	.word	0x00030240

000d451c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <malloc+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	681b      	ldr	r3, [r3, #0]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003021c 	.word	0x0003021c

000d452c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <free+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	685b      	ldr	r3, [r3, #4]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003021c 	.word	0x0003021c

000d453c <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <sprintf+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	68db      	ldr	r3, [r3, #12]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003021c 	.word	0x0003021c

000d454c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <abort+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003021c 	.word	0x0003021c

000d455c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d455c:	2100      	movs	r1, #0
   d455e:	f7ff bf5f 	b.w	d4420 <system_delay_ms>
	...

000d4564 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4564:	4802      	ldr	r0, [pc, #8]	; (d4570 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4566:	2300      	movs	r3, #0
   d4568:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d456a:	f7ff be01 	b.w	d4170 <os_mutex_recursive_create>
   d456e:	bf00      	nop
   d4570:	2003e4dc 	.word	0x2003e4dc

000d4574 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4574:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4576:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4578:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d457a:	b113      	cbz	r3, d4582 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d457c:	2203      	movs	r2, #3
   d457e:	4601      	mov	r1, r0
   d4580:	4798      	blx	r3
    }
   d4582:	4620      	mov	r0, r4
   d4584:	bd10      	pop	{r4, pc}

000d4586 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4586:	2200      	movs	r2, #0
   d4588:	4611      	mov	r1, r2
   d458a:	6840      	ldr	r0, [r0, #4]
   d458c:	f7ff bfae 	b.w	d44ec <network_listening>

000d4590 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4590:	2200      	movs	r2, #0
   d4592:	4611      	mov	r1, r2
   d4594:	6840      	ldr	r0, [r0, #4]
   d4596:	f7ff bfb9 	b.w	d450c <network_get_listen_timeout>

000d459a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d459a:	2200      	movs	r2, #0
   d459c:	6840      	ldr	r0, [r0, #4]
   d459e:	f7ff bfad 	b.w	d44fc <network_set_listen_timeout>

000d45a2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d45a2:	2200      	movs	r2, #0
   d45a4:	f081 0101 	eor.w	r1, r1, #1
   d45a8:	6840      	ldr	r0, [r0, #4]
   d45aa:	f7ff bf97 	b.w	d44dc <network_listen>

000d45ae <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d45ae:	2300      	movs	r3, #0
   d45b0:	461a      	mov	r2, r3
   d45b2:	4619      	mov	r1, r3
   d45b4:	6840      	ldr	r0, [r0, #4]
   d45b6:	f7ff bf89 	b.w	d44cc <network_off>

000d45ba <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45ba:	2300      	movs	r3, #0
   d45bc:	461a      	mov	r2, r3
   d45be:	4619      	mov	r1, r3
   d45c0:	6840      	ldr	r0, [r0, #4]
   d45c2:	f7ff bf7b 	b.w	d44bc <network_on>

000d45c6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45c6:	2200      	movs	r2, #0
   d45c8:	4611      	mov	r1, r2
   d45ca:	6840      	ldr	r0, [r0, #4]
   d45cc:	f7ff bf6e 	b.w	d44ac <network_ready>

000d45d0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45d0:	2200      	movs	r2, #0
   d45d2:	4611      	mov	r1, r2
   d45d4:	6840      	ldr	r0, [r0, #4]
   d45d6:	f7ff bf59 	b.w	d448c <network_connecting>

000d45da <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45da:	2200      	movs	r2, #0
   d45dc:	2102      	movs	r1, #2
   d45de:	6840      	ldr	r0, [r0, #4]
   d45e0:	f7ff bf5c 	b.w	d449c <network_disconnect>

000d45e4 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45e4:	2300      	movs	r3, #0
   d45e6:	461a      	mov	r2, r3
   d45e8:	6840      	ldr	r0, [r0, #4]
   d45ea:	f7ff bf47 	b.w	d447c <network_connect>
	...

000d45f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45f0:	4b02      	ldr	r3, [pc, #8]	; (d45fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45f2:	2203      	movs	r2, #3
   d45f4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45f6:	4a02      	ldr	r2, [pc, #8]	; (d4600 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45f8:	601a      	str	r2, [r3, #0]
   d45fa:	4770      	bx	lr
   d45fc:	2003e4e0 	.word	0x2003e4e0
   d4600:	000d5dbc 	.word	0x000d5dbc

000d4604 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4604:	4770      	bx	lr

000d4606 <_ZN9IPAddressD0Ev>:
   d4606:	b510      	push	{r4, lr}
   d4608:	2118      	movs	r1, #24
   d460a:	4604      	mov	r4, r0
   d460c:	f001 f9e5 	bl	d59da <_ZdlPvj>
   d4610:	4620      	mov	r0, r4
   d4612:	bd10      	pop	{r4, pc}

000d4614 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4614:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4616:	7d03      	ldrb	r3, [r0, #20]
   d4618:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d461a:	b08d      	sub	sp, #52	; 0x34
   d461c:	460e      	mov	r6, r1
   d461e:	f100 0704 	add.w	r7, r0, #4
   d4622:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4626:	d002      	beq.n	d462e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4628:	f100 0508 	add.w	r5, r0, #8
   d462c:	e018      	b.n	d4660 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d462e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4630:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4632:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4636:	232f      	movs	r3, #47	; 0x2f
   d4638:	462a      	mov	r2, r5
   d463a:	200a      	movs	r0, #10
   d463c:	f7ff fe00 	bl	d4240 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4640:	4628      	mov	r0, r5
   d4642:	f001 fb89 	bl	d5d58 <strlen>
   d4646:	6833      	ldr	r3, [r6, #0]
   d4648:	4602      	mov	r2, r0
   d464a:	68db      	ldr	r3, [r3, #12]
   d464c:	4629      	mov	r1, r5
   d464e:	4630      	mov	r0, r6
   d4650:	4798      	blx	r3
   d4652:	e00f      	b.n	d4674 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4654:	b124      	cbz	r4, d4660 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4656:	212e      	movs	r1, #46	; 0x2e
   d4658:	4630      	mov	r0, r6
   d465a:	f000 fbf7 	bl	d4e4c <_ZN5Print5printEc>
   d465e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4660:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4664:	220a      	movs	r2, #10
   d4666:	4630      	mov	r0, r6
   d4668:	f000 fc36 	bl	d4ed8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d466c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d466e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4670:	d1f0      	bne.n	d4654 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4672:	4620      	mov	r0, r4
    }
    return n;
}
   d4674:	b00d      	add	sp, #52	; 0x34
   d4676:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4678 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4678:	b510      	push	{r4, lr}
   d467a:	4b05      	ldr	r3, [pc, #20]	; (d4690 <_ZN9IPAddressC1Ev+0x18>)
   d467c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d467e:	2211      	movs	r2, #17
   d4680:	f840 3b04 	str.w	r3, [r0], #4
   d4684:	2100      	movs	r1, #0
   d4686:	f001 fb37 	bl	d5cf8 <memset>
{
    clear();
}
   d468a:	4620      	mov	r0, r4
   d468c:	bd10      	pop	{r4, pc}
   d468e:	bf00      	nop
   d4690:	000d5df0 	.word	0x000d5df0

000d4694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4694:	4603      	mov	r3, r0
   d4696:	4a07      	ldr	r2, [pc, #28]	; (d46b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4698:	b510      	push	{r4, lr}
   d469a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d469e:	f101 0210 	add.w	r2, r1, #16
   d46a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d46a6:	f843 4b04 	str.w	r4, [r3], #4
   d46aa:	4291      	cmp	r1, r2
   d46ac:	d1f9      	bne.n	d46a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d46ae:	780a      	ldrb	r2, [r1, #0]
   d46b0:	701a      	strb	r2, [r3, #0]
}
   d46b2:	bd10      	pop	{r4, pc}
   d46b4:	000d5df0 	.word	0x000d5df0

000d46b8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d46b8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d46ba:	2b04      	cmp	r3, #4
   d46bc:	d101      	bne.n	d46c2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d46be:	6840      	ldr	r0, [r0, #4]
   d46c0:	e008      	b.n	d46d4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d46c2:	2b06      	cmp	r3, #6
   d46c4:	d10a      	bne.n	d46dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d46c6:	6843      	ldr	r3, [r0, #4]
   d46c8:	b953      	cbnz	r3, d46e0 <_ZNK9IPAddresscvbEv+0x28>
   d46ca:	6883      	ldr	r3, [r0, #8]
   d46cc:	b943      	cbnz	r3, d46e0 <_ZNK9IPAddresscvbEv+0x28>
   d46ce:	68c3      	ldr	r3, [r0, #12]
   d46d0:	b933      	cbnz	r3, d46e0 <_ZNK9IPAddresscvbEv+0x28>
   d46d2:	6900      	ldr	r0, [r0, #16]
   d46d4:	3000      	adds	r0, #0
   d46d6:	bf18      	it	ne
   d46d8:	2001      	movne	r0, #1
   d46da:	4770      	bx	lr
    } else {
        return false;
   d46dc:	2000      	movs	r0, #0
   d46de:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d46e0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d46e2:	4770      	bx	lr

000d46e4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d46e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d46e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d46ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d46ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d46f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d46f6:	2304      	movs	r3, #4
   d46f8:	6041      	str	r1, [r0, #4]
   d46fa:	7503      	strb	r3, [r0, #20]
   d46fc:	bd10      	pop	{r4, pc}

000d46fe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d46fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4700:	780d      	ldrb	r5, [r1, #0]
   d4702:	788b      	ldrb	r3, [r1, #2]
   d4704:	784a      	ldrb	r2, [r1, #1]
   d4706:	78c9      	ldrb	r1, [r1, #3]
   d4708:	9100      	str	r1, [sp, #0]
   d470a:	4629      	mov	r1, r5
   d470c:	f7ff ffea 	bl	d46e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4710:	b003      	add	sp, #12
   d4712:	bd30      	pop	{r4, r5, pc}

000d4714 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4714:	6800      	ldr	r0, [r0, #0]
   d4716:	f7ff bd33 	b.w	d4180 <os_mutex_recursive_lock>
	...

000d471c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d471c:	4b01      	ldr	r3, [pc, #4]	; (d4724 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d471e:	4a02      	ldr	r2, [pc, #8]	; (d4728 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4720:	601a      	str	r2, [r3, #0]
   d4722:	4770      	bx	lr
   d4724:	2003e4e8 	.word	0x2003e4e8
   d4728:	000d5e6f 	.word	0x000d5e6f

000d472c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d472c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d472e:	2301      	movs	r3, #1
   d4730:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4732:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4734:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d4736:	b10b      	cbz	r3, d473c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d4738:	68c0      	ldr	r0, [r0, #12]
   d473a:	e006      	b.n	d474a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d473c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d473e:	b128      	cbz	r0, d474c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4740:	6883      	ldr	r3, [r0, #8]
   d4742:	b90b      	cbnz	r3, d4748 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d4744:	f001 f965 	bl	d5a12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4748:	68c3      	ldr	r3, [r0, #12]
   d474a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d474c:	2301      	movs	r3, #1
   d474e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4750:	2000      	movs	r0, #0
    }
   d4752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d4756:	f7ff bd23 	b.w	d41a0 <os_thread_exit>

000d475a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d475a:	2200      	movs	r2, #0
   d475c:	4611      	mov	r1, r2
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	f7ff bec4 	b.w	d44ec <network_listening>

000d4764 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4764:	2200      	movs	r2, #0
   d4766:	4611      	mov	r1, r2
   d4768:	6840      	ldr	r0, [r0, #4]
   d476a:	f7ff becf 	b.w	d450c <network_get_listen_timeout>

000d476e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d476e:	2200      	movs	r2, #0
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	f7ff bec3 	b.w	d44fc <network_set_listen_timeout>

000d4776 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4776:	2200      	movs	r2, #0
   d4778:	f081 0101 	eor.w	r1, r1, #1
   d477c:	6840      	ldr	r0, [r0, #4]
   d477e:	f7ff bead 	b.w	d44dc <network_listen>

000d4782 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4782:	2300      	movs	r3, #0
   d4784:	461a      	mov	r2, r3
   d4786:	2101      	movs	r1, #1
   d4788:	6840      	ldr	r0, [r0, #4]
   d478a:	f7ff be9f 	b.w	d44cc <network_off>

000d478e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d478e:	2300      	movs	r3, #0
   d4790:	461a      	mov	r2, r3
   d4792:	4619      	mov	r1, r3
   d4794:	6840      	ldr	r0, [r0, #4]
   d4796:	f7ff be91 	b.w	d44bc <network_on>

000d479a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d479a:	2200      	movs	r2, #0
   d479c:	4611      	mov	r1, r2
   d479e:	6840      	ldr	r0, [r0, #4]
   d47a0:	f7ff be84 	b.w	d44ac <network_ready>

000d47a4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47a4:	2200      	movs	r2, #0
   d47a6:	4611      	mov	r1, r2
   d47a8:	6840      	ldr	r0, [r0, #4]
   d47aa:	f7ff be6f 	b.w	d448c <network_connecting>

000d47ae <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47ae:	2200      	movs	r2, #0
   d47b0:	2102      	movs	r1, #2
   d47b2:	6840      	ldr	r0, [r0, #4]
   d47b4:	f7ff be72 	b.w	d449c <network_disconnect>

000d47b8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d47b8:	2300      	movs	r3, #0
   d47ba:	461a      	mov	r2, r3
   d47bc:	6840      	ldr	r0, [r0, #4]
   d47be:	f7ff be5d 	b.w	d447c <network_connect>

000d47c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d47c2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47c4:	4605      	mov	r5, r0
   d47c6:	b188      	cbz	r0, d47ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d47c8:	6804      	ldr	r4, [r0, #0]
   d47ca:	b14c      	cbz	r4, d47e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d47cc:	68a3      	ldr	r3, [r4, #8]
   d47ce:	b11b      	cbz	r3, d47d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47d0:	2203      	movs	r2, #3
   d47d2:	4621      	mov	r1, r4
   d47d4:	4620      	mov	r0, r4
   d47d6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47d8:	2110      	movs	r1, #16
   d47da:	4620      	mov	r0, r4
   d47dc:	f001 f8fd 	bl	d59da <_ZdlPvj>
   d47e0:	4628      	mov	r0, r5
   d47e2:	2114      	movs	r1, #20
      }
   d47e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47e8:	f001 b8f7 	b.w	d59da <_ZdlPvj>
   d47ec:	bd38      	pop	{r3, r4, r5, pc}

000d47ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d47ee:	b110      	cbz	r0, d47f6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d47f0:	6803      	ldr	r3, [r0, #0]
   d47f2:	685b      	ldr	r3, [r3, #4]
   d47f4:	4718      	bx	r3
   d47f6:	4770      	bx	lr

000d47f8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d47f8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d47fa:	6803      	ldr	r3, [r0, #0]
   d47fc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d47fe:	b1bb      	cbz	r3, d4830 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4800:	6858      	ldr	r0, [r3, #4]
   d4802:	f7ff fc95 	bl	d4130 <os_thread_is_current>
   d4806:	b978      	cbnz	r0, d4828 <_ZN6ThreadD1Ev+0x30>
   d4808:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d480a:	7c5a      	ldrb	r2, [r3, #17]
   d480c:	b912      	cbnz	r2, d4814 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d480e:	6858      	ldr	r0, [r3, #4]
   d4810:	f7ff fc96 	bl	d4140 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4814:	6823      	ldr	r3, [r4, #0]
   d4816:	6858      	ldr	r0, [r3, #4]
   d4818:	f7ff fc9a 	bl	d4150 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d481c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d481e:	2300      	movs	r3, #0
   d4820:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4822:	b128      	cbz	r0, d4830 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4824:	f7ff ffcd 	bl	d47c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4828:	6820      	ldr	r0, [r4, #0]
   d482a:	b108      	cbz	r0, d4830 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d482c:	f7ff ffc9 	bl	d47c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4830:	4620      	mov	r0, r4
   d4832:	bd10      	pop	{r4, pc}

000d4834 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4834:	b538      	push	{r3, r4, r5, lr}
   d4836:	4b0c      	ldr	r3, [pc, #48]	; (d4868 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4838:	6003      	str	r3, [r0, #0]
   d483a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d483c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4840:	b108      	cbz	r0, d4846 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4842:	f7ff fc2e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4846:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d484a:	b135      	cbz	r5, d485a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d484c:	4628      	mov	r0, r5
   d484e:	f7ff ffd3 	bl	d47f8 <_ZN6ThreadD1Ev>
   d4852:	2104      	movs	r1, #4
   d4854:	4628      	mov	r0, r5
   d4856:	f001 f8c0 	bl	d59da <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d485a:	68a0      	ldr	r0, [r4, #8]
   d485c:	b108      	cbz	r0, d4862 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d485e:	f7ff ffc6 	bl	d47ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4862:	4620      	mov	r0, r4
   d4864:	bd38      	pop	{r3, r4, r5, pc}
   d4866:	bf00      	nop
   d4868:	000d5ee4 	.word	0x000d5ee4

000d486c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d486c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4870:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d4872:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d4874:	460d      	mov	r5, r1
   d4876:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d4878:	f001 fa6e 	bl	d5d58 <strlen>
   d487c:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d4880:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d4882:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d4884:	b1ab      	cbz	r3, d48b2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d4886:	2140      	movs	r1, #64	; 0x40
   d4888:	4620      	mov	r0, r4
   d488a:	f001 fa6d 	bl	d5d68 <strnlen>

        if (event_name_length < filter_length)
   d488e:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d4890:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d4892:	d30b      	bcc.n	d48ac <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d4894:	4629      	mov	r1, r5
   d4896:	4620      	mov	r0, r4
   d4898:	f001 fa14 	bl	d5cc4 <memcmp>
        if (0 == cmp)
   d489c:	b930      	cbnz	r0, d48ac <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d489e:	9000      	str	r0, [sp, #0]
   d48a0:	4643      	mov	r3, r8
   d48a2:	462a      	mov	r2, r5
   d48a4:	4621      	mov	r1, r4
   d48a6:	2058      	movs	r0, #88	; 0x58
   d48a8:	f7ff fdd6 	bl	d4458 <system_invoke_event_handler>
   d48ac:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d48ae:	42b4      	cmp	r4, r6
   d48b0:	d1e7      	bne.n	d4882 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d48b2:	b002      	add	sp, #8
   d48b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48b8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d48b8:	b530      	push	{r4, r5, lr}
   d48ba:	b08d      	sub	sp, #52	; 0x34
   d48bc:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d48be:	2211      	movs	r2, #17
   d48c0:	2100      	movs	r1, #0
   d48c2:	a801      	add	r0, sp, #4
   d48c4:	f001 fa18 	bl	d5cf8 <memset>
    addr.v = 6;
   d48c8:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d48ca:	aa01      	add	r2, sp, #4
   d48cc:	4909      	ldr	r1, [pc, #36]	; (d48f4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d48ce:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d48d2:	200a      	movs	r0, #10
   d48d4:	f7ff fcbc 	bl	d4250 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48d8:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d48da:	a901      	add	r1, sp, #4
   d48dc:	a806      	add	r0, sp, #24
   d48de:	f7ff fed9 	bl	d4694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d48e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48e4:	3404      	adds	r4, #4
   d48e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48e8:	682b      	ldr	r3, [r5, #0]
   d48ea:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d48ec:	2000      	movs	r0, #0
   d48ee:	b00d      	add	sp, #52	; 0x34
   d48f0:	bd30      	pop	{r4, r5, pc}
   d48f2:	bf00      	nop
   d48f4:	000d5f10 	.word	0x000d5f10

000d48f8 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d48f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48fc:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d48fe:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d4902:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4904:	4630      	mov	r0, r6
   d4906:	f7ff ff05 	bl	d4714 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d490a:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d490c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4910:	f7ff fc3e 	bl	d4190 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d4914:	2c00      	cmp	r4, #0
   d4916:	d063      	beq.n	d49e0 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d4918:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d491c:	b163      	cbz	r3, d4938 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d491e:	6823      	ldr	r3, [r4, #0]
   d4920:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d4924:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d4926:	4620      	mov	r0, r4
   d4928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d492c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d4930:	47b8      	blx	r7
        if (len > 0) {
   d4932:	1e04      	subs	r4, r0, #0
   d4934:	dc13      	bgt.n	d495e <_ZN5spark11MeshPublish4pollEv+0x66>
   d4936:	e056      	b.n	d49e6 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d4938:	492d      	ldr	r1, [pc, #180]	; (d49f0 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d493a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d493e:	f001 f866 	bl	d5a0e <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4942:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d4946:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d494a:	b113      	cbz	r3, d4952 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d494c:	4618      	mov	r0, r3
   d494e:	f7ff fba8 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d4952:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d4956:	2b00      	cmp	r3, #0
   d4958:	d1e1      	bne.n	d491e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d495a:	4826      	ldr	r0, [pc, #152]	; (d49f4 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d495c:	e044      	b.n	d49e8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d495e:	2320      	movs	r3, #32
   d4960:	4a25      	ldr	r2, [pc, #148]	; (d49f8 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d4962:	9302      	str	r3, [sp, #8]
   d4964:	9200      	str	r2, [sp, #0]
   d4966:	2300      	movs	r3, #0
   d4968:	9401      	str	r4, [sp, #4]
   d496a:	aa02      	add	r2, sp, #8
   d496c:	4923      	ldr	r1, [pc, #140]	; (d49fc <_ZN5spark11MeshPublish4pollEv+0x104>)
   d496e:	9303      	str	r3, [sp, #12]
   d4970:	2001      	movs	r0, #1
   d4972:	f7ff fd45 	bl	d4400 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4976:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d497a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d497c:	781b      	ldrb	r3, [r3, #0]
   d497e:	bb6b      	cbnz	r3, d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d4980:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d4982:	4621      	mov	r1, r4
   d4984:	4638      	mov	r0, r7
   d4986:	f001 f9ef 	bl	d5d68 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d498a:	b338      	cbz	r0, d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d498c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d498e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d4990:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d4994:	dd22      	ble.n	d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d4996:	5c3b      	ldrb	r3, [r7, r0]
   d4998:	bb03      	cbnz	r3, d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d499a:	3c01      	subs	r4, #1
   d499c:	d00e      	beq.n	d49bc <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d499e:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d49a2:	4621      	mov	r1, r4
   d49a4:	4640      	mov	r0, r8
   d49a6:	f001 f9df 	bl	d5d68 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d49aa:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d49ac:	2c00      	cmp	r4, #0
   d49ae:	dd15      	ble.n	d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d49b0:	f818 3000 	ldrb.w	r3, [r8, r0]
   d49b4:	b993      	cbnz	r3, d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d49b6:	2c01      	cmp	r4, #1
   d49b8:	d002      	beq.n	d49c0 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d49ba:	e00f      	b.n	d49dc <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d49bc:	f8df 8044 	ldr.w	r8, [pc, #68]	; d4a04 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d49c0:	4630      	mov	r0, r6
   d49c2:	f7ff fea7 	bl	d4714 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d49c6:	4642      	mov	r2, r8
   d49c8:	4639      	mov	r1, r7
   d49ca:	1d28      	adds	r0, r5, #4
   d49cc:	f7ff ff4e 	bl	d486c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d49d0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d49d4:	f7ff fbdc 	bl	d4190 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d49d8:	2000      	movs	r0, #0
   d49da:	e005      	b.n	d49e8 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d49dc:	4808      	ldr	r0, [pc, #32]	; (d4a00 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d49de:	e003      	b.n	d49e8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d49e0:	2064      	movs	r0, #100	; 0x64
   d49e2:	f7ff fbed 	bl	d41c0 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d49e6:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d49e8:	b00a      	add	sp, #40	; 0x28
   d49ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49ee:	bf00      	nop
   d49f0:	000d60b4 	.word	0x000d60b4
   d49f4:	fffffefc 	.word	0xfffffefc
   d49f8:	000d5f24 	.word	0x000d5f24
   d49fc:	000d5f1d 	.word	0x000d5f1d
   d4a00:	fffffee8 	.word	0xfffffee8
   d4a04:	000d5ea0 	.word	0x000d5ea0

000d4a08 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d4a08:	b510      	push	{r4, lr}
   d4a0a:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4a0c:	f3bf 8f5f 	dmb	sy
   d4a10:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d4a14:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d4a18:	b91b      	cbnz	r3, d4a22 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	f7ff ff6c 	bl	d48f8 <_ZN5spark11MeshPublish4pollEv>
   d4a20:	e7f4      	b.n	d4a0c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d4a22:	bd10      	pop	{r4, pc}

000d4a24 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d4a24:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a26:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a28:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4a2a:	b144      	cbz	r4, d4a3e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	f7ff fee3 	bl	d47f8 <_ZN6ThreadD1Ev>
   d4a32:	4620      	mov	r0, r4
   d4a34:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d4a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a3a:	f000 bfce 	b.w	d59da <_ZdlPvj>
   d4a3e:	bd10      	pop	{r4, pc}

000d4a40 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d4a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a44:	4605      	mov	r5, r0
   d4a46:	b08a      	sub	sp, #40	; 0x28
   d4a48:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d4a4c:	f7ff fe62 	bl	d4714 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d4a50:	682c      	ldr	r4, [r5, #0]
   d4a52:	2c00      	cmp	r4, #0
   d4a54:	d17b      	bne.n	d4b4e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d4a56:	204c      	movs	r0, #76	; 0x4c
   d4a58:	f7ff fb1d 	bl	d4096 <_Znwj>
   d4a5c:	4606      	mov	r6, r0
   d4a5e:	2800      	cmp	r0, #0
   d4a60:	d073      	beq.n	d4b4a <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d4a62:	f000 fd23 	bl	d54ac <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d4a66:	4622      	mov	r2, r4
   d4a68:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4a6c:	4630      	mov	r0, r6
   d4a6e:	f000 fd4d 	bl	d550c <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4a72:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d4a74:	483a      	ldr	r0, [pc, #232]	; (d4b60 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4a76:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4a7a:	f7ff fbb9 	bl	d41f0 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d4a7e:	6833      	ldr	r3, [r6, #0]
   d4a80:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4a84:	6a1b      	ldr	r3, [r3, #32]
   d4a86:	f249 0169 	movw	r1, #36969	; 0x9069
   d4a8a:	4630      	mov	r0, r6
   d4a8c:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d4a8e:	a804      	add	r0, sp, #16
   d4a90:	f7ff fdf2 	bl	d4678 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4a94:	a804      	add	r0, sp, #16
   d4a96:	f7ff ff0f 	bl	d48b8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4a9a:	2800      	cmp	r0, #0
   d4a9c:	db4a      	blt.n	d4b34 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d4a9e:	a904      	add	r1, sp, #16
   d4aa0:	4630      	mov	r0, r6
   d4aa2:	f000 fd9f 	bl	d55e4 <_ZN3UDP13joinMulticastERK9IPAddress>
   d4aa6:	2800      	cmp	r0, #0
   d4aa8:	db44      	blt.n	d4b34 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4aaa:	f3bf 8f5f 	dmb	sy
   d4aae:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d4ab2:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d4ab6:	492b      	ldr	r1, [pc, #172]	; (d4b64 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d4ab8:	2004      	movs	r0, #4
   d4aba:	f000 ff99 	bl	d59f0 <_ZnwjRKSt9nothrow_t>
   d4abe:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d4ac2:	4607      	mov	r7, r0
   d4ac4:	b348      	cbz	r0, d4b1a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d4ac6:	4927      	ldr	r1, [pc, #156]	; (d4b64 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d4ac8:	2014      	movs	r0, #20
   d4aca:	f000 ff91 	bl	d59f0 <_ZnwjRKSt9nothrow_t>
   d4ace:	b128      	cbz	r0, d4adc <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d4ad0:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4ad2:	6004      	str	r4, [r0, #0]
   d4ad4:	6044      	str	r4, [r0, #4]
   d4ad6:	6084      	str	r4, [r0, #8]
   d4ad8:	60c4      	str	r4, [r0, #12]
   d4ada:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4adc:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d4ade:	b1b0      	cbz	r0, d4b0e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d4ae0:	4b21      	ldr	r3, [pc, #132]	; (d4b68 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d4ae2:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ae4:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4ae6:	4921      	ldr	r1, [pc, #132]	; (d4b6c <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d4ae8:	60dd      	str	r5, [r3, #12]
   d4aea:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4aec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d4af0:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4af4:	2203      	movs	r2, #3
   d4af6:	4b1e      	ldr	r3, [pc, #120]	; (d4b70 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d4af8:	3004      	adds	r0, #4
   d4afa:	f7ff fb11 	bl	d4120 <os_thread_create>
   d4afe:	b930      	cbnz	r0, d4b0e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d4b00:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d4b02:	7c1b      	ldrb	r3, [r3, #16]
   d4b04:	b94b      	cbnz	r3, d4b1a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d4b06:	2001      	movs	r0, #1
   d4b08:	f7ff fb5a 	bl	d41c0 <HAL_Delay_Milliseconds>
   d4b0c:	e7f8      	b.n	d4b00 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b0e:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b10:	2300      	movs	r3, #0
   d4b12:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b14:	b108      	cbz	r0, d4b1a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d4b16:	f7ff fe54 	bl	d47c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d4b1a:	4639      	mov	r1, r7
   d4b1c:	4640      	mov	r0, r8
   d4b1e:	f7ff ff81 	bl	d4a24 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d4b22:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d4b26:	b13b      	cbz	r3, d4b38 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b28:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b2a:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b2c:	b130      	cbz	r0, d4b3c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d4b2e:	f7ff fe5e 	bl	d47ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4b32:	e00c      	b.n	d4b4e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d4b34:	4604      	mov	r4, r0
   d4b36:	e003      	b.n	d4b40 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d4b38:	4c0e      	ldr	r4, [pc, #56]	; (d4b74 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d4b3a:	e001      	b.n	d4b40 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d4b3c:	4604      	mov	r4, r0
   d4b3e:	e007      	b.n	d4b50 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b40:	b136      	cbz	r6, d4b50 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d4b42:	4630      	mov	r0, r6
   d4b44:	f7ff fe53 	bl	d47ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4b48:	e002      	b.n	d4b50 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d4b4a:	4c0a      	ldr	r4, [pc, #40]	; (d4b74 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d4b4c:	e000      	b.n	d4b50 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d4b4e:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4b50:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4b54:	f7ff fb1c 	bl	d4190 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d4b58:	4620      	mov	r0, r4
   d4b5a:	b00a      	add	sp, #40	; 0x28
   d4b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b60:	000d5f34 	.word	0x000d5f34
   d4b64:	000d60b4 	.word	0x000d60b4
   d4b68:	000d4a09 	.word	0x000d4a09
   d4b6c:	000d5f38 	.word	0x000d5f38
   d4b70:	000d472d 	.word	0x000d472d
   d4b74:	fffffefc 	.word	0xfffffefc

000d4b78 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d4b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b7c:	4605      	mov	r5, r0
   d4b7e:	b08c      	sub	sp, #48	; 0x30
   d4b80:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d4b82:	460f      	mov	r7, r1
   d4b84:	b109      	cbz	r1, d4b8a <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d4b86:	780b      	ldrb	r3, [r1, #0]
   d4b88:	b90b      	cbnz	r3, d4b8e <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d4b8a:	4c35      	ldr	r4, [pc, #212]	; (d4c60 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d4b8c:	e064      	b.n	d4c58 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d4b8e:	4608      	mov	r0, r1
   d4b90:	f001 f8e2 	bl	d5d58 <strlen>
   d4b94:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4b96:	2e00      	cmp	r6, #0
   d4b98:	d05c      	beq.n	d4c54 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	f001 f8dc 	bl	d5d58 <strlen>
   d4ba0:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4ba2:	f108 0302 	add.w	r3, r8, #2
   d4ba6:	4423      	add	r3, r4
   d4ba8:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d4bac:	d84f      	bhi.n	d4c4e <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d4bae:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d4bb2:	f7ff fdaf 	bl	d4714 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d4bb6:	4628      	mov	r0, r5
   d4bb8:	f7ff ff42 	bl	d4a40 <_ZN5spark11MeshPublish13initializeUdpEv>
   d4bbc:	2800      	cmp	r0, #0
   d4bbe:	db40      	blt.n	d4c42 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d4bc0:	4668      	mov	r0, sp
   d4bc2:	f7ff fd59 	bl	d4678 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4bc6:	4668      	mov	r0, sp
   d4bc8:	f7ff fe76 	bl	d48b8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	db38      	blt.n	d4c42 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4bd0:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d4bd4:	f8da 3000 	ldr.w	r3, [sl]
   d4bd8:	f10d 0c04 	add.w	ip, sp, #4
   d4bdc:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d4be0:	4b20      	ldr	r3, [pc, #128]	; (d4c64 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d4be2:	9306      	str	r3, [sp, #24]
   d4be4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4be8:	f10d 0e1c 	add.w	lr, sp, #28
   d4bec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4bf0:	f8dc 3000 	ldr.w	r3, [ip]
   d4bf4:	f88e 3000 	strb.w	r3, [lr]
   d4bf8:	f249 0269 	movw	r2, #36969	; 0x9069
   d4bfc:	a906      	add	r1, sp, #24
   d4bfe:	4650      	mov	r0, sl
   d4c00:	47c8      	blx	r9
   d4c02:	2800      	cmp	r0, #0
   d4c04:	db1d      	blt.n	d4c42 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d4c06:	2300      	movs	r3, #0
   d4c08:	6828      	ldr	r0, [r5, #0]
   d4c0a:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d4c0e:	6803      	ldr	r3, [r0, #0]
   d4c10:	2201      	movs	r2, #1
   d4c12:	68db      	ldr	r3, [r3, #12]
   d4c14:	a906      	add	r1, sp, #24
   d4c16:	4798      	blx	r3
   d4c18:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d4c1a:	6803      	ldr	r3, [r0, #0]
   d4c1c:	f108 0201 	add.w	r2, r8, #1
   d4c20:	68db      	ldr	r3, [r3, #12]
   d4c22:	4639      	mov	r1, r7
   d4c24:	4798      	blx	r3
    if (dataLen > 0) {
   d4c26:	b12c      	cbz	r4, d4c34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d4c28:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d4c2a:	6803      	ldr	r3, [r0, #0]
   d4c2c:	4622      	mov	r2, r4
   d4c2e:	68db      	ldr	r3, [r3, #12]
   d4c30:	4631      	mov	r1, r6
   d4c32:	4798      	blx	r3
   d4c34:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d4c36:	6803      	ldr	r3, [r0, #0]
   d4c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c3a:	4798      	blx	r3
   d4c3c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d4c40:	e000      	b.n	d4c44 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d4c42:	4604      	mov	r4, r0
   d4c44:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4c48:	f7ff faa2 	bl	d4190 <os_mutex_recursive_unlock>
   d4c4c:	e004      	b.n	d4c58 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4c4e:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d4c52:	e001      	b.n	d4c58 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4c54:	4634      	mov	r4, r6
   d4c56:	e7a4      	b.n	d4ba2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d4c58:	4620      	mov	r0, r4
   d4c5a:	b00c      	add	sp, #48	; 0x30
   d4c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4c60:	fffffef2 	.word	0xfffffef2
   d4c64:	000d5df0 	.word	0x000d5df0

000d4c68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4c68:	b538      	push	{r3, r4, r5, lr}
   d4c6a:	4c0e      	ldr	r4, [pc, #56]	; (d4ca4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4c6c:	4b0e      	ldr	r3, [pc, #56]	; (d4ca8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4c6e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c70:	2500      	movs	r5, #0
   d4c72:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4c74:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4c78:	6063      	str	r3, [r4, #4]
   d4c7a:	60a5      	str	r5, [r4, #8]
   d4c7c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c80:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4c84:	f7ff fa74 	bl	d4170 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4c88:	4b08      	ldr	r3, [pc, #32]	; (d4cac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4c8a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c8e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4c92:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4c94:	4620      	mov	r0, r4
   d4c96:	4a06      	ldr	r2, [pc, #24]	; (d4cb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4c98:	4906      	ldr	r1, [pc, #24]	; (d4cb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4c9e:	f000 be97 	b.w	d59d0 <__aeabi_atexit>
   d4ca2:	bf00      	nop
   d4ca4:	2003e4ec 	.word	0x2003e4ec
   d4ca8:	000d5f48 	.word	0x000d5f48
   d4cac:	000d5ee4 	.word	0x000d5ee4
   d4cb0:	2003e4cc 	.word	0x2003e4cc
   d4cb4:	000d4835 	.word	0x000d4835

000d4cb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4cb8:	2300      	movs	r3, #0
   d4cba:	461a      	mov	r2, r3
   d4cbc:	6840      	ldr	r0, [r0, #4]
   d4cbe:	f7ff bbdd 	b.w	d447c <network_connect>

000d4cc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4cc2:	2200      	movs	r2, #0
   d4cc4:	2102      	movs	r1, #2
   d4cc6:	6840      	ldr	r0, [r0, #4]
   d4cc8:	f7ff bbe8 	b.w	d449c <network_disconnect>

000d4ccc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ccc:	2200      	movs	r2, #0
   d4cce:	4611      	mov	r1, r2
   d4cd0:	6840      	ldr	r0, [r0, #4]
   d4cd2:	f7ff bbdb 	b.w	d448c <network_connecting>

000d4cd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4cd6:	2200      	movs	r2, #0
   d4cd8:	4611      	mov	r1, r2
   d4cda:	6840      	ldr	r0, [r0, #4]
   d4cdc:	f7ff bbe6 	b.w	d44ac <network_ready>

000d4ce0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4ce0:	2300      	movs	r3, #0
   d4ce2:	461a      	mov	r2, r3
   d4ce4:	4619      	mov	r1, r3
   d4ce6:	6840      	ldr	r0, [r0, #4]
   d4ce8:	f7ff bbe8 	b.w	d44bc <network_on>

000d4cec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4cec:	2300      	movs	r3, #0
   d4cee:	461a      	mov	r2, r3
   d4cf0:	4619      	mov	r1, r3
   d4cf2:	6840      	ldr	r0, [r0, #4]
   d4cf4:	f7ff bbea 	b.w	d44cc <network_off>

000d4cf8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4cf8:	2200      	movs	r2, #0
   d4cfa:	f081 0101 	eor.w	r1, r1, #1
   d4cfe:	6840      	ldr	r0, [r0, #4]
   d4d00:	f7ff bbec 	b.w	d44dc <network_listen>

000d4d04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d04:	2200      	movs	r2, #0
   d4d06:	6840      	ldr	r0, [r0, #4]
   d4d08:	f7ff bbf8 	b.w	d44fc <network_set_listen_timeout>

000d4d0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	4611      	mov	r1, r2
   d4d10:	6840      	ldr	r0, [r0, #4]
   d4d12:	f7ff bbfb 	b.w	d450c <network_get_listen_timeout>

000d4d16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d16:	2200      	movs	r2, #0
   d4d18:	4611      	mov	r1, r2
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bbe6 	b.w	d44ec <network_listening>

000d4d20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d24:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d26:	b095      	sub	sp, #84	; 0x54
   d4d28:	4616      	mov	r6, r2
   d4d2a:	460d      	mov	r5, r1
   d4d2c:	4607      	mov	r7, r0
    IPAddress addr;
   d4d2e:	f7ff fca3 	bl	d4678 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4d32:	4621      	mov	r1, r4
   d4d34:	2220      	movs	r2, #32
   d4d36:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d38:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d3a:	f000 ffdd 	bl	d5cf8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d3e:	2340      	movs	r3, #64	; 0x40
   d4d40:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d42:	4621      	mov	r1, r4
   d4d44:	466b      	mov	r3, sp
   d4d46:	aa0c      	add	r2, sp, #48	; 0x30
   d4d48:	4630      	mov	r0, r6
   d4d4a:	f7ff faa9 	bl	d42a0 <netdb_getaddrinfo>
    if (!r) {
   d4d4e:	4604      	mov	r4, r0
   d4d50:	2800      	cmp	r0, #0
   d4d52:	d144      	bne.n	d4dde <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d54:	4602      	mov	r2, r0
   d4d56:	2101      	movs	r1, #1
   d4d58:	6868      	ldr	r0, [r5, #4]
   d4d5a:	f7ff fba7 	bl	d44ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d5e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d60:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d62:	4622      	mov	r2, r4
   d4d64:	6868      	ldr	r0, [r5, #4]
   d4d66:	f7ff fba1 	bl	d44ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d6a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d6c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4d6e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d70:	2e00      	cmp	r6, #0
   d4d72:	d034      	beq.n	d4dde <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4d74:	2900      	cmp	r1, #0
   d4d76:	d132      	bne.n	d4dde <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4d78:	6873      	ldr	r3, [r6, #4]
   d4d7a:	2b02      	cmp	r3, #2
   d4d7c:	d002      	beq.n	d4d84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4d7e:	2b0a      	cmp	r3, #10
   d4d80:	d009      	beq.n	d4d96 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4d82:	e02a      	b.n	d4dda <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4d84:	f1b8 0f00 	cmp.w	r8, #0
   d4d88:	d027      	beq.n	d4dda <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4d8a:	6971      	ldr	r1, [r6, #20]
   d4d8c:	4638      	mov	r0, r7
   d4d8e:	3104      	adds	r1, #4
   d4d90:	f7ff fcb5 	bl	d46fe <_ZN9IPAddressaSEPKh>
   d4d94:	e020      	b.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4d96:	f1b9 0f00 	cmp.w	r9, #0
   d4d9a:	d01e      	beq.n	d4dda <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4d9c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4d9e:	2211      	movs	r2, #17
   d4da0:	a801      	add	r0, sp, #4
   d4da2:	f000 ffa9 	bl	d5cf8 <memset>
                    a.v = 6;
   d4da6:	2306      	movs	r3, #6
   d4da8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4dac:	ad01      	add	r5, sp, #4
   d4dae:	f104 0308 	add.w	r3, r4, #8
   d4db2:	3418      	adds	r4, #24
   d4db4:	6818      	ldr	r0, [r3, #0]
   d4db6:	6859      	ldr	r1, [r3, #4]
   d4db8:	462a      	mov	r2, r5
   d4dba:	c203      	stmia	r2!, {r0, r1}
   d4dbc:	3308      	adds	r3, #8
   d4dbe:	42a3      	cmp	r3, r4
   d4dc0:	4615      	mov	r5, r2
   d4dc2:	d1f7      	bne.n	d4db4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4dc4:	a901      	add	r1, sp, #4
   d4dc6:	a806      	add	r0, sp, #24
   d4dc8:	ad07      	add	r5, sp, #28
   d4dca:	f7ff fc63 	bl	d4694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4dd0:	1d3c      	adds	r4, r7, #4
   d4dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4dd4:	682b      	ldr	r3, [r5, #0]
   d4dd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4dd8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dda:	69f6      	ldr	r6, [r6, #28]
   d4ddc:	e7c8      	b.n	d4d70 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4dde:	9800      	ldr	r0, [sp, #0]
   d4de0:	f7ff fa56 	bl	d4290 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4de4:	4638      	mov	r0, r7
   d4de6:	b015      	add	sp, #84	; 0x54
   d4de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4dec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4dec:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4dee:	4a03      	ldr	r2, [pc, #12]	; (d4dfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4df0:	601a      	str	r2, [r3, #0]
   d4df2:	2200      	movs	r2, #0
   d4df4:	605a      	str	r2, [r3, #4]
   d4df6:	4770      	bx	lr
   d4df8:	2003e6c0 	.word	0x2003e6c0
   d4dfc:	000d5f48 	.word	0x000d5f48

000d4e00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e02:	4606      	mov	r6, r0
   d4e04:	460d      	mov	r5, r1
   d4e06:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e08:	2400      	movs	r4, #0
  while (size--) {
   d4e0a:	42bd      	cmp	r5, r7
   d4e0c:	d00c      	beq.n	d4e28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e0e:	6833      	ldr	r3, [r6, #0]
   d4e10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e14:	689b      	ldr	r3, [r3, #8]
   d4e16:	4630      	mov	r0, r6
   d4e18:	4798      	blx	r3
     if (chunk>=0)
   d4e1a:	2800      	cmp	r0, #0
   d4e1c:	db01      	blt.n	d4e22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e1e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4e20:	e7f3      	b.n	d4e0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e22:	2c00      	cmp	r4, #0
   d4e24:	bf08      	it	eq
   d4e26:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e28:	4620      	mov	r0, r4
   d4e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e2c:	b570      	push	{r4, r5, r6, lr}
   d4e2e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4e30:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4e32:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4e34:	b149      	cbz	r1, d4e4a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4e36:	f000 ff8f 	bl	d5d58 <strlen>
   d4e3a:	682b      	ldr	r3, [r5, #0]
   d4e3c:	4602      	mov	r2, r0
   d4e3e:	4621      	mov	r1, r4
   d4e40:	4628      	mov	r0, r5
   d4e42:	68db      	ldr	r3, [r3, #12]
    }
   d4e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e48:	4718      	bx	r3
    }
   d4e4a:	bd70      	pop	{r4, r5, r6, pc}

000d4e4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e4c:	6803      	ldr	r3, [r0, #0]
   d4e4e:	689b      	ldr	r3, [r3, #8]
   d4e50:	4718      	bx	r3

000d4e52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e54:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e56:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e58:	f7ff fff8 	bl	d4e4c <_ZN5Print5printEc>
  n += print('\n');
   d4e5c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4e5e:	4604      	mov	r4, r0
  n += print('\n');
   d4e60:	4628      	mov	r0, r5
   d4e62:	f7ff fff3 	bl	d4e4c <_ZN5Print5printEc>
  return n;
}
   d4e66:	4420      	add	r0, r4
   d4e68:	bd38      	pop	{r3, r4, r5, pc}

000d4e6a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e6a:	b538      	push	{r3, r4, r5, lr}
   d4e6c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e6e:	f7ff ffdd 	bl	d4e2c <_ZN5Print5writeEPKc>
   d4e72:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4e74:	4628      	mov	r0, r5
   d4e76:	f7ff ffec 	bl	d4e52 <_ZN5Print7printlnEv>
  return n;
}
   d4e7a:	4420      	add	r0, r4
   d4e7c:	bd38      	pop	{r3, r4, r5, pc}

000d4e7e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e7e:	b530      	push	{r4, r5, lr}
   d4e80:	b08b      	sub	sp, #44	; 0x2c
   d4e82:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e84:	2100      	movs	r1, #0
   d4e86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e8a:	2a01      	cmp	r2, #1
   d4e8c:	bf98      	it	ls
   d4e8e:	220a      	movls	r2, #10
   d4e90:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4e94:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4e98:	fb05 3312 	mls	r3, r5, r2, r3
   d4e9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ea0:	2b09      	cmp	r3, #9
   d4ea2:	bf94      	ite	ls
   d4ea4:	3330      	addls	r3, #48	; 0x30
   d4ea6:	3337      	addhi	r3, #55	; 0x37
   d4ea8:	b2db      	uxtb	r3, r3
   d4eaa:	4621      	mov	r1, r4
   d4eac:	f804 3901 	strb.w	r3, [r4], #-1
   d4eb0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4eb2:	2d00      	cmp	r5, #0
   d4eb4:	d1ee      	bne.n	d4e94 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4eb6:	f7ff ffb9 	bl	d4e2c <_ZN5Print5writeEPKc>
}
   d4eba:	b00b      	add	sp, #44	; 0x2c
   d4ebc:	bd30      	pop	{r4, r5, pc}

000d4ebe <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4ebe:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4ec0:	b92a      	cbnz	r2, d4ece <_ZN5Print5printEmi+0x10>
   d4ec2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4ec8:	689b      	ldr	r3, [r3, #8]
   d4eca:	b2c9      	uxtb	r1, r1
   d4ecc:	4718      	bx	r3
  else return printNumber(n, base);
   d4ece:	b2d2      	uxtb	r2, r2
}
   d4ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4ed4:	f7ff bfd3 	b.w	d4e7e <_ZN5Print11printNumberEmh>

000d4ed8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4ed8:	f7ff bff1 	b.w	d4ebe <_ZN5Print5printEmi>

000d4edc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4edc:	b510      	push	{r4, lr}
   d4ede:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee0:	f7ff fb48 	bl	d4574 <_ZNSt14_Function_baseD1Ev>
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}

000d4ee8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ee8:	4803      	ldr	r0, [pc, #12]	; (d4ef8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4eea:	4a04      	ldr	r2, [pc, #16]	; (d4efc <_GLOBAL__sub_I_RGB+0x14>)
   d4eec:	4904      	ldr	r1, [pc, #16]	; (d4f00 <_GLOBAL__sub_I_RGB+0x18>)
   d4eee:	2300      	movs	r3, #0
   d4ef0:	6083      	str	r3, [r0, #8]
   d4ef2:	f000 bd6d 	b.w	d59d0 <__aeabi_atexit>
   d4ef6:	bf00      	nop
   d4ef8:	2003e6c8 	.word	0x2003e6c8
   d4efc:	2003e4cc 	.word	0x2003e4cc
   d4f00:	000d4edd 	.word	0x000d4edd

000d4f04 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4f04:	4770      	bx	lr

000d4f06 <_ZN8SPIClassD0Ev>:
   d4f06:	b510      	push	{r4, lr}
   d4f08:	2110      	movs	r1, #16
   d4f0a:	4604      	mov	r4, r0
   d4f0c:	f000 fd65 	bl	d59da <_ZdlPvj>
   d4f10:	4620      	mov	r0, r4
   d4f12:	bd10      	pop	{r4, pc}

000d4f14 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4f14:	b570      	push	{r4, r5, r6, lr}
   d4f16:	4b08      	ldr	r3, [pc, #32]	; (d4f38 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4f18:	6003      	str	r3, [r0, #0]
   d4f1a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4f1c:	2500      	movs	r5, #0
   d4f1e:	460e      	mov	r6, r1
   d4f20:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4f24:	f7ff f91c 	bl	d4160 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4f28:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4f2a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4f2c:	f7ff f9f0 	bl	d4310 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4f30:	60a5      	str	r5, [r4, #8]
}
   d4f32:	4620      	mov	r0, r4
   d4f34:	bd70      	pop	{r4, r5, r6, pc}
   d4f36:	bf00      	nop
   d4f38:	000d5f7c 	.word	0x000d5f7c

000d4f3c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4f3c:	4b04      	ldr	r3, [pc, #16]	; (d4f50 <_GLOBAL__sub_I_System+0x14>)
   d4f3e:	2000      	movs	r0, #0
   d4f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f44:	7018      	strb	r0, [r3, #0]
   d4f46:	8058      	strh	r0, [r3, #2]
   d4f48:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f4a:	f7ff ba61 	b.w	d4410 <set_system_mode>
   d4f4e:	bf00      	nop
   d4f50:	2003e6d8 	.word	0x2003e6d8

000d4f54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f54:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f56:	681a      	ldr	r2, [r3, #0]
   d4f58:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f5a:	601a      	str	r2, [r3, #0]
   d4f5c:	4770      	bx	lr
   d4f5e:	bf00      	nop
   d4f60:	2003e464 	.word	0x2003e464
   d4f64:	2003e6e0 	.word	0x2003e6e0

000d4f68 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4f68:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f6a:	6804      	ldr	r4, [r0, #0]
   d4f6c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4f6e:	46a4      	mov	ip, r4
    }
   d4f70:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f74:	4760      	bx	ip

000d4f76 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4f76:	6803      	ldr	r3, [r0, #0]
   d4f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f7a:	4718      	bx	r3

000d4f7c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4f7c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4f7e:	4770      	bx	lr

000d4f80 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4f80:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4f82:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4f84:	1a10      	subs	r0, r2, r0
   d4f86:	4770      	bx	lr

000d4f88 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f88:	b513      	push	{r0, r1, r4, lr}
   d4f8a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4f8c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f8e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4f92:	68d4      	ldr	r4, [r2, #12]
   d4f94:	4619      	mov	r1, r3
   d4f96:	2201      	movs	r2, #1
   d4f98:	47a0      	blx	r4
}
   d4f9a:	b002      	add	sp, #8
   d4f9c:	bd10      	pop	{r4, pc}

000d4f9e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4f9e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4fa0:	6803      	ldr	r3, [r0, #0]
   d4fa2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4fa4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4fa6:	4798      	blx	r3
   d4fa8:	b128      	cbz	r0, d4fb6 <_ZN3UDP4readEv+0x18>
   d4faa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4fac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4fae:	1c59      	adds	r1, r3, #1
   d4fb0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4fb2:	5cd0      	ldrb	r0, [r2, r3]
   d4fb4:	bd10      	pop	{r4, pc}
   d4fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4fbc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4fbe:	6803      	ldr	r3, [r0, #0]
   d4fc0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4fc2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4fc4:	4798      	blx	r3
   d4fc6:	b118      	cbz	r0, d4fd0 <_ZN3UDP4peekEv+0x14>
   d4fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4fca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4fcc:	5cd0      	ldrb	r0, [r2, r3]
   d4fce:	bd10      	pop	{r4, pc}
   d4fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4fd4:	bd10      	pop	{r4, pc}

000d4fd6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4fd6:	4770      	bx	lr

000d4fd8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4fd8:	b410      	push	{r4}
   d4fda:	4603      	mov	r3, r0
   d4fdc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fde:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4fe0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4fe2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4fe4:	6803      	ldr	r3, [r0, #0]
   d4fe6:	1a52      	subs	r2, r2, r1
   d4fe8:	68db      	ldr	r3, [r3, #12]
   d4fea:	4421      	add	r1, r4
}
   d4fec:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4ff0:	4718      	bx	r3

000d4ff2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4ff2:	f1a0 0010 	sub.w	r0, r0, #16
   d4ff6:	f7ff bfef 	b.w	d4fd8 <_ZNK3UDP7printToER5Print>

000d4ffa <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4ffc:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4ffe:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5000:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5004:	4604      	mov	r4, r0
   d5006:	460f      	mov	r7, r1
   d5008:	4615      	mov	r5, r2
    stop();
   d500a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d500c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d500e:	4632      	mov	r2, r6
   d5010:	2100      	movs	r1, #0
   d5012:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5014:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5016:	f000 fe6f 	bl	d5cf8 <memset>
    saddr.sin6_len = sizeof(saddr);
   d501a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d501e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5020:	260a      	movs	r6, #10
   d5022:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5026:	f7ff f92b 	bl	d4280 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d502a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d502c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5030:	2102      	movs	r1, #2
   d5032:	4630      	mov	r0, r6
   d5034:	f7ff f964 	bl	d4300 <sock_socket>

    if (_sock < 0) {
   d5038:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d503a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d503c:	db24      	blt.n	d5088 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d503e:	2204      	movs	r2, #4
   d5040:	9200      	str	r2, [sp, #0]
   d5042:	ab02      	add	r3, sp, #8
   d5044:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5048:	f7ff f93a 	bl	d42c0 <sock_setsockopt>
   d504c:	b9e0      	cbnz	r0, d5088 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d504e:	b195      	cbz	r5, d5076 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5050:	9003      	str	r0, [sp, #12]
   d5052:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5056:	a903      	add	r1, sp, #12
   d5058:	b2e8      	uxtb	r0, r5
   d505a:	f7ff f8d1 	bl	d4200 <if_index_to_name>
   d505e:	b998      	cbnz	r0, d5088 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5060:	2306      	movs	r3, #6
   d5062:	9300      	str	r3, [sp, #0]
   d5064:	f241 020b 	movw	r2, #4107	; 0x100b
   d5068:	ab03      	add	r3, sp, #12
   d506a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d506e:	6960      	ldr	r0, [r4, #20]
   d5070:	f7ff f926 	bl	d42c0 <sock_setsockopt>
   d5074:	b940      	cbnz	r0, d5088 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5076:	221c      	movs	r2, #28
   d5078:	a905      	add	r1, sp, #20
   d507a:	6960      	ldr	r0, [r4, #20]
   d507c:	f7ff f918 	bl	d42b0 <sock_bind>
   d5080:	b910      	cbnz	r0, d5088 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5082:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5084:	2001      	movs	r0, #1
   d5086:	e004      	b.n	d5092 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5088:	6823      	ldr	r3, [r4, #0]
   d508a:	4620      	mov	r0, r4
   d508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d508e:	4798      	blx	r3
   d5090:	2000      	movs	r0, #0
    }
    return bound;
}
   d5092:	b00d      	add	sp, #52	; 0x34
   d5094:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5096 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5096:	b510      	push	{r4, lr}
   d5098:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d509a:	6940      	ldr	r0, [r0, #20]
   d509c:	2800      	cmp	r0, #0
   d509e:	db01      	blt.n	d50a4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d50a0:	f7ff f916 	bl	d42d0 <sock_close>
    }

    _sock = -1;
   d50a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d50a8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50aa:	2300      	movs	r3, #0
   d50ac:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d50ae:	8723      	strh	r3, [r4, #56]	; 0x38
   d50b0:	bd10      	pop	{r4, pc}

000d50b2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d50b2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d50b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d50b6:	4605      	mov	r5, r0
   d50b8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d50ba:	b113      	cbz	r3, d50c2 <_ZN3UDP5writeEPKhj+0x10>
   d50bc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d50be:	1a24      	subs	r4, r4, r0
   d50c0:	e000      	b.n	d50c4 <_ZN3UDP5writeEPKhj+0x12>
   d50c2:	461c      	mov	r4, r3
   d50c4:	4294      	cmp	r4, r2
   d50c6:	bf28      	it	cs
   d50c8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d50ca:	4622      	mov	r2, r4
   d50cc:	4418      	add	r0, r3
   d50ce:	f000 fe08 	bl	d5ce2 <memcpy>
    _offset += size;
   d50d2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d50d4:	4423      	add	r3, r4
   d50d6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d50d8:	4620      	mov	r0, r4
   d50da:	bd38      	pop	{r3, r4, r5, pc}

000d50dc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50dc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d50de:	6803      	ldr	r3, [r0, #0]
   d50e0:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50e2:	4604      	mov	r4, r0
   d50e4:	460e      	mov	r6, r1
   d50e6:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d50e8:	4798      	blx	r3
   d50ea:	b188      	cbz	r0, d5110 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d50ec:	6823      	ldr	r3, [r4, #0]
   d50ee:	4620      	mov	r0, r4
   d50f0:	691b      	ldr	r3, [r3, #16]
   d50f2:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d50f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d50f8:	4285      	cmp	r5, r0
   d50fa:	bfa8      	it	ge
   d50fc:	4605      	movge	r5, r0
   d50fe:	4419      	add	r1, r3
   d5100:	462a      	mov	r2, r5
   d5102:	4630      	mov	r0, r6
   d5104:	f000 fded 	bl	d5ce2 <memcpy>
        _offset += read;
   d5108:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d510a:	442b      	add	r3, r5
   d510c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d510e:	e001      	b.n	d5114 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5110:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5114:	4628      	mov	r0, r5
   d5116:	bd70      	pop	{r4, r5, r6, pc}

000d5118 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5118:	b570      	push	{r4, r5, r6, lr}
   d511a:	4604      	mov	r4, r0
   d511c:	4b05      	ldr	r3, [pc, #20]	; (d5134 <_ZN3UDP8remoteIPEv+0x1c>)
   d511e:	f844 3b04 	str.w	r3, [r4], #4
   d5122:	f101 0520 	add.w	r5, r1, #32
   d5126:	4606      	mov	r6, r0
   d5128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d512a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d512c:	682b      	ldr	r3, [r5, #0]
   d512e:	7023      	strb	r3, [r4, #0]
   d5130:	4630      	mov	r0, r6
   d5132:	bd70      	pop	{r4, r5, r6, pc}
   d5134:	000d5df0 	.word	0x000d5df0

000d5138 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5138:	b5f0      	push	{r4, r5, r6, r7, lr}
   d513a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d513c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d513e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5140:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5142:	4a0a      	ldr	r2, [pc, #40]	; (d516c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5144:	9202      	str	r2, [sp, #8]
   d5146:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5148:	468e      	mov	lr, r1
   d514a:	4606      	mov	r6, r0
   d514c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d514e:	ac03      	add	r4, sp, #12
   d5150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5152:	682b      	ldr	r3, [r5, #0]
   d5154:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5156:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d515a:	9300      	str	r3, [sp, #0]
   d515c:	4662      	mov	r2, ip
   d515e:	ab02      	add	r3, sp, #8
   d5160:	4671      	mov	r1, lr
   d5162:	4630      	mov	r0, r6
   d5164:	47b8      	blx	r7
    }
   d5166:	b009      	add	sp, #36	; 0x24
   d5168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d516a:	bf00      	nop
   d516c:	000d5df0 	.word	0x000d5df0

000d5170 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5170:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5172:	6803      	ldr	r3, [r0, #0]
   d5174:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5178:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d517a:	4b0d      	ldr	r3, [pc, #52]	; (d51b0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d517c:	b089      	sub	sp, #36	; 0x24
   d517e:	f100 0620 	add.w	r6, r0, #32
   d5182:	4604      	mov	r4, r0
   d5184:	9302      	str	r3, [sp, #8]
   d5186:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5188:	ad03      	add	r5, sp, #12
   d518a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d518c:	6833      	ldr	r3, [r6, #0]
   d518e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5190:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5192:	9300      	str	r3, [sp, #0]
   d5194:	4672      	mov	r2, lr
   d5196:	ab02      	add	r3, sp, #8
   d5198:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d519a:	4620      	mov	r0, r4
   d519c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d519e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d51a0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d51a2:	69db      	ldr	r3, [r3, #28]
   d51a4:	4620      	mov	r0, r4
   d51a6:	4798      	blx	r3
    return result;
}
   d51a8:	4628      	mov	r0, r5
   d51aa:	b009      	add	sp, #36	; 0x24
   d51ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51ae:	bf00      	nop
   d51b0:	000d5df0 	.word	0x000d5df0

000d51b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d51b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d51b6:	7843      	ldrb	r3, [r0, #1]
   d51b8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d51ba:	b08d      	sub	sp, #52	; 0x34
   d51bc:	4605      	mov	r5, r0
   d51be:	460c      	mov	r4, r1
   d51c0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d51c2:	d101      	bne.n	d51c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d51c4:	1d01      	adds	r1, r0, #4
   d51c6:	e033      	b.n	d5230 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d51c8:	2b0a      	cmp	r3, #10
   d51ca:	d135      	bne.n	d5238 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d51cc:	2211      	movs	r2, #17
   d51ce:	2100      	movs	r1, #0
   d51d0:	a801      	add	r0, sp, #4
   d51d2:	f000 fd91 	bl	d5cf8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51d6:	68ab      	ldr	r3, [r5, #8]
   d51d8:	b943      	cbnz	r3, d51ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51da:	68eb      	ldr	r3, [r5, #12]
   d51dc:	b933      	cbnz	r3, d51ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51de:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d51e2:	692e      	ldr	r6, [r5, #16]
   d51e4:	f7ff f83c 	bl	d4260 <inet_htonl>
   d51e8:	4286      	cmp	r6, r0
   d51ea:	d01f      	beq.n	d522c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51ec:	f105 0308 	add.w	r3, r5, #8
   d51f0:	ae01      	add	r6, sp, #4
   d51f2:	f105 0e18 	add.w	lr, r5, #24
   d51f6:	6818      	ldr	r0, [r3, #0]
   d51f8:	6859      	ldr	r1, [r3, #4]
   d51fa:	4632      	mov	r2, r6
   d51fc:	c203      	stmia	r2!, {r0, r1}
   d51fe:	3308      	adds	r3, #8
   d5200:	4573      	cmp	r3, lr
   d5202:	4616      	mov	r6, r2
   d5204:	d1f7      	bne.n	d51f6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5206:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5208:	a901      	add	r1, sp, #4
   d520a:	a806      	add	r0, sp, #24
   d520c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d520e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5212:	f7ff fa3f 	bl	d4694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5216:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5218:	3404      	adds	r4, #4
   d521a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d521c:	6833      	ldr	r3, [r6, #0]
   d521e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5220:	b157      	cbz	r7, d5238 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5222:	8868      	ldrh	r0, [r5, #2]
   d5224:	f7ff f824 	bl	d4270 <inet_ntohs>
   d5228:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d522a:	e005      	b.n	d5238 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d522c:	f105 0114 	add.w	r1, r5, #20
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff fa64 	bl	d46fe <_ZN9IPAddressaSEPKh>
   d5236:	e7f3      	b.n	d5220 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5238:	b00d      	add	sp, #52	; 0x34
   d523a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d523c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5240:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5242:	ab0e      	add	r3, sp, #56	; 0x38
   d5244:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5246:	4606      	mov	r6, r0
   d5248:	4617      	mov	r7, r2
   d524a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d524c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5250:	462a      	mov	r2, r5
   d5252:	4629      	mov	r1, r5
   d5254:	f7ff f824 	bl	d42a0 <netdb_getaddrinfo>
   d5258:	2800      	cmp	r0, #0
   d525a:	db1f      	blt.n	d529c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d525c:	9b01      	ldr	r3, [sp, #4]
   d525e:	b1fb      	cbz	r3, d52a0 <_ZN3UDP11beginPacketEPKct+0x64>
   d5260:	695b      	ldr	r3, [r3, #20]
   d5262:	b1eb      	cbz	r3, d52a0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5264:	a802      	add	r0, sp, #8
   d5266:	f7ff fa07 	bl	d4678 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d526a:	9b01      	ldr	r3, [sp, #4]
   d526c:	462a      	mov	r2, r5
   d526e:	6958      	ldr	r0, [r3, #20]
   d5270:	a902      	add	r1, sp, #8
   d5272:	f7ff ff9f 	bl	d51b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5276:	a802      	add	r0, sp, #8
   d5278:	f7ff fa1e 	bl	d46b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d527c:	b180      	cbz	r0, d52a0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d527e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5280:	ad03      	add	r5, sp, #12
   d5282:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5286:	4b0b      	ldr	r3, [pc, #44]	; (d52b4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5288:	9308      	str	r3, [sp, #32]
   d528a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d528c:	ac09      	add	r4, sp, #36	; 0x24
   d528e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5290:	682b      	ldr	r3, [r5, #0]
   d5292:	7023      	strb	r3, [r4, #0]
   d5294:	463a      	mov	r2, r7
   d5296:	a908      	add	r1, sp, #32
   d5298:	4630      	mov	r0, r6
   d529a:	47c0      	blx	r8
   d529c:	4604      	mov	r4, r0
   d529e:	e001      	b.n	d52a4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d52a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d52a4:	9801      	ldr	r0, [sp, #4]
   d52a6:	f7fe fff3 	bl	d4290 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d52aa:	4620      	mov	r0, r4
   d52ac:	b00e      	add	sp, #56	; 0x38
   d52ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52b2:	bf00      	nop
   d52b4:	000d5df0 	.word	0x000d5df0

000d52b8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d52b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d52bc:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d52c0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d52c4:	b08c      	sub	sp, #48	; 0x30
   d52c6:	4605      	mov	r5, r0
   d52c8:	460c      	mov	r4, r1
   d52ca:	4617      	mov	r7, r2
   d52cc:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d52ce:	db00      	blt.n	d52d2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d52d0:	b911      	cbnz	r1, d52d8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d52d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d52d6:	e035      	b.n	d5344 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d52d8:	f04f 0a1c 	mov.w	sl, #28
   d52dc:	ae05      	add	r6, sp, #20
   d52de:	4652      	mov	r2, sl
   d52e0:	2100      	movs	r1, #0
   d52e2:	4630      	mov	r0, r6
   d52e4:	f000 fd08 	bl	d5cf8 <memset>
        socklen_t slen = sizeof(saddr);
   d52e8:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d52ec:	f1b9 0f00 	cmp.w	r9, #0
   d52f0:	d014      	beq.n	d531c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d52f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52f6:	fbb9 f1f2 	udiv	r1, r9, r2
   d52fa:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d52fc:	fb02 9111 	mls	r1, r2, r1, r9
   d5300:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5302:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5304:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5306:	9300      	str	r3, [sp, #0]
   d5308:	f241 0206 	movw	r2, #4102	; 0x1006
   d530c:	ab03      	add	r3, sp, #12
   d530e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5312:	4640      	mov	r0, r8
   d5314:	f7fe ffd4 	bl	d42c0 <sock_setsockopt>
            if (ret) {
   d5318:	b108      	cbz	r0, d531e <_ZN3UDP13receivePacketEPhjm+0x66>
   d531a:	e013      	b.n	d5344 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d531c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d531e:	ab02      	add	r3, sp, #8
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	4621      	mov	r1, r4
   d5324:	4603      	mov	r3, r0
   d5326:	9600      	str	r6, [sp, #0]
   d5328:	463a      	mov	r2, r7
   d532a:	6968      	ldr	r0, [r5, #20]
   d532c:	f7fe ffd8 	bl	d42e0 <sock_recvfrom>
        if (ret >= 0) {
   d5330:	1e04      	subs	r4, r0, #0
   d5332:	db06      	blt.n	d5342 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5334:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5338:	f105 011c 	add.w	r1, r5, #28
   d533c:	4630      	mov	r0, r6
   d533e:	f7ff ff39 	bl	d51b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5342:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5344:	b00c      	add	sp, #48	; 0x30
   d5346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d534a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d534a:	b538      	push	{r3, r4, r5, lr}
   d534c:	4605      	mov	r5, r0
   d534e:	4614      	mov	r4, r2
   d5350:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5352:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5354:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5356:	d111      	bne.n	d537c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5358:	231c      	movs	r3, #28
   d535a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d535c:	230a      	movs	r3, #10
   d535e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5360:	f7fe ff8e 	bl	d4280 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5364:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5366:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d536a:	1d2b      	adds	r3, r5, #4
   d536c:	3514      	adds	r5, #20
   d536e:	f853 2b04 	ldr.w	r2, [r3], #4
   d5372:	f844 2b04 	str.w	r2, [r4], #4
   d5376:	42ab      	cmp	r3, r5
   d5378:	d1f9      	bne.n	d536e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d537a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d537c:	2b04      	cmp	r3, #4
   d537e:	d10a      	bne.n	d5396 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5380:	2310      	movs	r3, #16
   d5382:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5384:	2302      	movs	r3, #2
   d5386:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5388:	f7fe ff7a 	bl	d4280 <inet_htons>
   d538c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d538e:	6868      	ldr	r0, [r5, #4]
   d5390:	f7fe ff66 	bl	d4260 <inet_htonl>
   d5394:	6060      	str	r0, [r4, #4]
   d5396:	bd38      	pop	{r3, r4, r5, pc}

000d5398 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d539c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d539e:	ac03      	add	r4, sp, #12
   d53a0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d53a2:	4699      	mov	r9, r3
   d53a4:	4606      	mov	r6, r0
   d53a6:	460f      	mov	r7, r1
   d53a8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d53aa:	2100      	movs	r1, #0
   d53ac:	462a      	mov	r2, r5
   d53ae:	4620      	mov	r0, r4
   d53b0:	f000 fca2 	bl	d5cf8 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d53b4:	4622      	mov	r2, r4
   d53b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d53ba:	4648      	mov	r0, r9
   d53bc:	f7ff ffc5 	bl	d534a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d53c0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d53c4:	b143      	cbz	r3, d53d8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d53c6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d53ca:	2300      	movs	r3, #0
   d53cc:	4642      	mov	r2, r8
   d53ce:	4639      	mov	r1, r7
   d53d0:	6970      	ldr	r0, [r6, #20]
   d53d2:	f7fe ff8d 	bl	d42f0 <sock_sendto>
   d53d6:	e001      	b.n	d53dc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d53d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d53dc:	b00b      	add	sp, #44	; 0x2c
   d53de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53e4:	b091      	sub	sp, #68	; 0x44
   d53e6:	460c      	mov	r4, r1
   d53e8:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d53ea:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53ec:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d53ee:	a809      	add	r0, sp, #36	; 0x24
   d53f0:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53f2:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d53f4:	f000 fc80 	bl	d5cf8 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d53f8:	aa09      	add	r2, sp, #36	; 0x24
   d53fa:	2100      	movs	r1, #0
   d53fc:	4620      	mov	r0, r4
   d53fe:	f7ff ffa4 	bl	d534a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5402:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5406:	2b02      	cmp	r3, #2
   d5408:	d12e      	bne.n	d5468 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d540a:	2300      	movs	r3, #0
   d540c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d540e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5410:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5412:	b1dd      	cbz	r5, d544c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5414:	a902      	add	r1, sp, #8
   d5416:	4628      	mov	r0, r5
   d5418:	f7fe fefa 	bl	d4210 <if_get_by_index>
   d541c:	b9b0      	cbnz	r0, d544c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d541e:	a910      	add	r1, sp, #64	; 0x40
   d5420:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5424:	9802      	ldr	r0, [sp, #8]
   d5426:	f7fe fefb 	bl	d4220 <if_get_addrs>
   d542a:	b960      	cbnz	r0, d5446 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d542c:	9b03      	ldr	r3, [sp, #12]
   d542e:	b153      	cbz	r3, d5446 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5430:	68da      	ldr	r2, [r3, #12]
   d5432:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5434:	7851      	ldrb	r1, [r2, #1]
   d5436:	2902      	cmp	r1, #2
   d5438:	d103      	bne.n	d5442 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d543a:	6852      	ldr	r2, [r2, #4]
   d543c:	b10a      	cbz	r2, d5442 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d543e:	9205      	str	r2, [sp, #20]
   d5440:	e001      	b.n	d5446 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5442:	681b      	ldr	r3, [r3, #0]
   d5444:	e7f3      	b.n	d542e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5446:	9803      	ldr	r0, [sp, #12]
   d5448:	f7fe fef2 	bl	d4230 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d544c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d544e:	f04f 0308 	mov.w	r3, #8
   d5452:	9300      	str	r3, [sp, #0]
   d5454:	bf18      	it	ne
   d5456:	2203      	movne	r2, #3
   d5458:	ab04      	add	r3, sp, #16
   d545a:	bf08      	it	eq
   d545c:	2204      	moveq	r2, #4
   d545e:	2100      	movs	r1, #0
   d5460:	4630      	mov	r0, r6
   d5462:	f7fe ff2d 	bl	d42c0 <sock_setsockopt>
   d5466:	e01e      	b.n	d54a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5468:	2b0a      	cmp	r3, #10
   d546a:	d11a      	bne.n	d54a2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d546c:	ac04      	add	r4, sp, #16
   d546e:	2214      	movs	r2, #20
   d5470:	2100      	movs	r1, #0
   d5472:	4620      	mov	r0, r4
   d5474:	f000 fc40 	bl	d5cf8 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5478:	ab0b      	add	r3, sp, #44	; 0x2c
   d547a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d547c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d547e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5482:	f04f 0314 	mov.w	r3, #20
   d5486:	9300      	str	r3, [sp, #0]
   d5488:	bf18      	it	ne
   d548a:	220c      	movne	r2, #12
   d548c:	4623      	mov	r3, r4
   d548e:	bf08      	it	eq
   d5490:	220d      	moveq	r2, #13
   d5492:	2129      	movs	r1, #41	; 0x29
   d5494:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5496:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5498:	f7fe ff12 	bl	d42c0 <sock_setsockopt>
   d549c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d54a0:	e001      	b.n	d54a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d54a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d54a6:	b011      	add	sp, #68	; 0x44
   d54a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d54ac <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d54ac:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54b2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d54b4:	4b0b      	ldr	r3, [pc, #44]	; (d54e4 <_ZN3UDPC1Ev+0x38>)
   d54b6:	f103 0208 	add.w	r2, r3, #8
   d54ba:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54bc:	2500      	movs	r5, #0
   d54be:	6103      	str	r3, [r0, #16]
   d54c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d54c4:	4604      	mov	r4, r0
   d54c6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d54c8:	6002      	str	r2, [r0, #0]
   d54ca:	6143      	str	r3, [r0, #20]
   d54cc:	301c      	adds	r0, #28
   d54ce:	f7ff f8d3 	bl	d4678 <_ZN9IPAddressC1Ev>
   d54d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d54d6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d54d8:	8725      	strh	r5, [r4, #56]	; 0x38
   d54da:	63e5      	str	r5, [r4, #60]	; 0x3c
   d54dc:	6423      	str	r3, [r4, #64]	; 0x40
   d54de:	6465      	str	r5, [r4, #68]	; 0x44
}
   d54e0:	4620      	mov	r0, r4
   d54e2:	bd38      	pop	{r3, r4, r5, pc}
   d54e4:	000d5fb0 	.word	0x000d5fb0

000d54e8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54e8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d54ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54ee:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d54f0:	b123      	cbz	r3, d54fc <_ZN3UDP13releaseBufferEv+0x14>
   d54f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d54f4:	b110      	cbz	r0, d54fc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d54f6:	2101      	movs	r1, #1
   d54f8:	f000 fa6f 	bl	d59da <_ZdlPvj>
    }
    _buffer = NULL;
   d54fc:	2300      	movs	r3, #0
   d54fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5500:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5504:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5506:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5508:	8723      	strh	r3, [r4, #56]	; 0x38
   d550a:	bd10      	pop	{r4, pc}

000d550c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d550c:	b570      	push	{r4, r5, r6, lr}
   d550e:	4604      	mov	r4, r0
   d5510:	4616      	mov	r6, r2
   d5512:	460d      	mov	r5, r1
    releaseBuffer();
   d5514:	f7ff ffe8 	bl	d54e8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5518:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d551a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d551c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d551e:	b93e      	cbnz	r6, d5530 <_ZN3UDP9setBufferEjPh+0x24>
   d5520:	b135      	cbz	r5, d5530 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5522:	4628      	mov	r0, r5
   d5524:	f7fe fdb9 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5528:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d552a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d552c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5532:	b103      	cbz	r3, d5536 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5534:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5536:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5538:	3000      	adds	r0, #0
   d553a:	bf18      	it	ne
   d553c:	2001      	movne	r0, #1
   d553e:	bd70      	pop	{r4, r5, r6, pc}

000d5540 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5542:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5546:	4605      	mov	r5, r0
   d5548:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d554a:	b91a      	cbnz	r2, d5554 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d554c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d554e:	b109      	cbz	r1, d5554 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5550:	f7ff ffdc 	bl	d550c <_ZN3UDP9setBufferEjPh>
   d5554:	3404      	adds	r4, #4
   d5556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5558:	f105 0620 	add.w	r6, r5, #32
   d555c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d555e:	6823      	ldr	r3, [r4, #0]
   d5560:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5562:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5564:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5566:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5568:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d556a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d556e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d556e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5570:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5572:	4604      	mov	r4, r0
   d5574:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d5576:	b91a      	cbnz	r2, d5580 <_ZN3UDP11parsePacketEm+0x12>
   d5578:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d557a:	b109      	cbz	r1, d5580 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d557c:	f7ff ffc6 	bl	d550c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5580:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5582:	2200      	movs	r2, #0
   d5584:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5586:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5588:	b149      	cbz	r1, d559e <_ZN3UDP11parsePacketEm+0x30>
   d558a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d558c:	b13a      	cbz	r2, d559e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d558e:	6823      	ldr	r3, [r4, #0]
   d5590:	4620      	mov	r0, r4
   d5592:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d5594:	4633      	mov	r3, r6
   d5596:	47a8      	blx	r5
        if (result > 0) {
   d5598:	2800      	cmp	r0, #0
            _total = result;
   d559a:	bfc8      	it	gt
   d559c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d559e:	6823      	ldr	r3, [r4, #0]
   d55a0:	4620      	mov	r0, r4
   d55a2:	691b      	ldr	r3, [r3, #16]
}
   d55a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d55a8:	4718      	bx	r3
	...

000d55ac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d55ac:	b510      	push	{r4, lr}
   d55ae:	4b07      	ldr	r3, [pc, #28]	; (d55cc <_ZN3UDPD1Ev+0x20>)
   d55b0:	f103 0208 	add.w	r2, r3, #8
   d55b4:	336c      	adds	r3, #108	; 0x6c
   d55b6:	4604      	mov	r4, r0
   d55b8:	6002      	str	r2, [r0, #0]
   d55ba:	6103      	str	r3, [r0, #16]
   d55bc:	f7ff fd6b 	bl	d5096 <_ZN3UDP4stopEv>
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff ff91 	bl	d54e8 <_ZN3UDP13releaseBufferEv>
   d55c6:	4620      	mov	r0, r4
   d55c8:	bd10      	pop	{r4, pc}
   d55ca:	bf00      	nop
   d55cc:	000d5fb0 	.word	0x000d5fb0

000d55d0 <_ZN3UDPD0Ev>:
   d55d0:	b510      	push	{r4, lr}
   d55d2:	4604      	mov	r4, r0
   d55d4:	f7ff ffea 	bl	d55ac <_ZN3UDPD1Ev>
   d55d8:	4620      	mov	r0, r4
   d55da:	214c      	movs	r1, #76	; 0x4c
   d55dc:	f000 f9fd 	bl	d59da <_ZdlPvj>
   d55e0:	4620      	mov	r0, r4
   d55e2:	bd10      	pop	{r4, pc}

000d55e4 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d55e4:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d55e6:	6940      	ldr	r0, [r0, #20]
   d55e8:	2800      	cmp	r0, #0
   d55ea:	db04      	blt.n	d55f6 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d55ec:	2301      	movs	r3, #1
   d55ee:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d55f2:	f7ff bef6 	b.w	d53e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d55f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d55fa:	4770      	bx	lr

000d55fc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d55fc:	4770      	bx	lr

000d55fe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55fe:	7441      	strb	r1, [r0, #17]
   d5600:	4770      	bx	lr

000d5602 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5602:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5604:	7c00      	ldrb	r0, [r0, #16]
   d5606:	f7fe febb 	bl	d4380 <HAL_USART_Available_Data_For_Write>
}
   d560a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d560e:	bd08      	pop	{r3, pc}

000d5610 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5610:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5612:	7c00      	ldrb	r0, [r0, #16]
   d5614:	f7fe fe94 	bl	d4340 <HAL_USART_Available_Data>
}
   d5618:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d561c:	bd08      	pop	{r3, pc}

000d561e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d561e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5620:	7c00      	ldrb	r0, [r0, #16]
   d5622:	f7fe fe9d 	bl	d4360 <HAL_USART_Peek_Data>
}
   d5626:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d562a:	bf28      	it	cs
   d562c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5630:	bd08      	pop	{r3, pc}

000d5632 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5632:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5634:	7c00      	ldrb	r0, [r0, #16]
   d5636:	f7fe fe8b 	bl	d4350 <HAL_USART_Read_Data>
}
   d563a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d563e:	bf28      	it	cs
   d5640:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5644:	bd08      	pop	{r3, pc}

000d5646 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5646:	7c00      	ldrb	r0, [r0, #16]
   d5648:	f7fe be92 	b.w	d4370 <HAL_USART_Flush_Data>

000d564c <_ZN11USARTSerialD0Ev>:
   d564c:	b510      	push	{r4, lr}
   d564e:	2114      	movs	r1, #20
   d5650:	4604      	mov	r4, r0
   d5652:	f000 f9c2 	bl	d59da <_ZdlPvj>
   d5656:	4620      	mov	r0, r4
   d5658:	bd10      	pop	{r4, pc}

000d565a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d565a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d565c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d565e:	4604      	mov	r4, r0
   d5660:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5662:	b925      	cbnz	r5, d566e <_ZN11USARTSerial5writeEh+0x14>
   d5664:	7c00      	ldrb	r0, [r0, #16]
   d5666:	f7fe fe8b 	bl	d4380 <HAL_USART_Available_Data_For_Write>
   d566a:	2800      	cmp	r0, #0
   d566c:	dd05      	ble.n	d567a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d566e:	4631      	mov	r1, r6
   d5670:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5676:	f7fe be5b 	b.w	d4330 <HAL_USART_Write_Data>
  }
  return 0;
}
   d567a:	4628      	mov	r0, r5
   d567c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5680 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5680:	b510      	push	{r4, lr}
   d5682:	4604      	mov	r4, r0
   d5684:	4608      	mov	r0, r1
   d5686:	4611      	mov	r1, r2
   d5688:	2200      	movs	r2, #0
   d568a:	6062      	str	r2, [r4, #4]
   d568c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5690:	60a2      	str	r2, [r4, #8]
   d5692:	4a05      	ldr	r2, [pc, #20]	; (d56a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5694:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5696:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5698:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d569a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d569c:	461a      	mov	r2, r3
   d569e:	f7fe fe3f 	bl	d4320 <HAL_USART_Init>
}
   d56a2:	4620      	mov	r0, r4
   d56a4:	bd10      	pop	{r4, pc}
   d56a6:	bf00      	nop
   d56a8:	000d6028 	.word	0x000d6028

000d56ac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d56ae:	4c19      	ldr	r4, [pc, #100]	; (d5714 <_Z22__fetch_global_Serial1v+0x68>)
   d56b0:	6825      	ldr	r5, [r4, #0]
   d56b2:	b94d      	cbnz	r5, d56c8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d56b4:	2084      	movs	r0, #132	; 0x84
   d56b6:	f7fe fcee 	bl	d4096 <_Znwj>
   d56ba:	4606      	mov	r6, r0
   d56bc:	b118      	cbz	r0, d56c6 <_Z22__fetch_global_Serial1v+0x1a>
   d56be:	2284      	movs	r2, #132	; 0x84
   d56c0:	4629      	mov	r1, r5
   d56c2:	f000 fb19 	bl	d5cf8 <memset>
   d56c6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d56c8:	4d13      	ldr	r5, [pc, #76]	; (d5718 <_Z22__fetch_global_Serial1v+0x6c>)
   d56ca:	682e      	ldr	r6, [r5, #0]
   d56cc:	b94e      	cbnz	r6, d56e2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d56ce:	2084      	movs	r0, #132	; 0x84
   d56d0:	f7fe fce1 	bl	d4096 <_Znwj>
   d56d4:	4607      	mov	r7, r0
   d56d6:	b118      	cbz	r0, d56e0 <_Z22__fetch_global_Serial1v+0x34>
   d56d8:	2284      	movs	r2, #132	; 0x84
   d56da:	4631      	mov	r1, r6
   d56dc:	f000 fb0c 	bl	d5cf8 <memset>
   d56e0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d56e2:	4f0e      	ldr	r7, [pc, #56]	; (d571c <_Z22__fetch_global_Serial1v+0x70>)
   d56e4:	6839      	ldr	r1, [r7, #0]
   d56e6:	f011 0601 	ands.w	r6, r1, #1
   d56ea:	d111      	bne.n	d5710 <_Z22__fetch_global_Serial1v+0x64>
   d56ec:	4638      	mov	r0, r7
   d56ee:	f7fe fcda 	bl	d40a6 <__cxa_guard_acquire>
   d56f2:	b168      	cbz	r0, d5710 <_Z22__fetch_global_Serial1v+0x64>
   d56f4:	6822      	ldr	r2, [r4, #0]
   d56f6:	682b      	ldr	r3, [r5, #0]
   d56f8:	4809      	ldr	r0, [pc, #36]	; (d5720 <_Z22__fetch_global_Serial1v+0x74>)
   d56fa:	4631      	mov	r1, r6
   d56fc:	f7ff ffc0 	bl	d5680 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5700:	4638      	mov	r0, r7
   d5702:	f7fe fcd5 	bl	d40b0 <__cxa_guard_release>
   d5706:	4a07      	ldr	r2, [pc, #28]	; (d5724 <_Z22__fetch_global_Serial1v+0x78>)
   d5708:	4907      	ldr	r1, [pc, #28]	; (d5728 <_Z22__fetch_global_Serial1v+0x7c>)
   d570a:	4805      	ldr	r0, [pc, #20]	; (d5720 <_Z22__fetch_global_Serial1v+0x74>)
   d570c:	f000 f960 	bl	d59d0 <__aeabi_atexit>
#endif
	return serial1;
}
   d5710:	4803      	ldr	r0, [pc, #12]	; (d5720 <_Z22__fetch_global_Serial1v+0x74>)
   d5712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5714:	2003e700 	.word	0x2003e700
   d5718:	2003e6f8 	.word	0x2003e6f8
   d571c:	2003e6fc 	.word	0x2003e6fc
   d5720:	2003e6e4 	.word	0x2003e6e4
   d5724:	2003e4cc 	.word	0x2003e4cc
   d5728:	000d55fd 	.word	0x000d55fd

000d572c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d572c:	7441      	strb	r1, [r0, #17]
   d572e:	4770      	bx	lr

000d5730 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5730:	4770      	bx	lr

000d5732 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5732:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5734:	2100      	movs	r1, #0
   d5736:	7c00      	ldrb	r0, [r0, #16]
   d5738:	f7fe fe4a 	bl	d43d0 <HAL_USB_USART_Receive_Data>
}
   d573c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5740:	bf28      	it	cs
   d5742:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5746:	bd08      	pop	{r3, pc}

000d5748 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5748:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d574a:	2101      	movs	r1, #1
   d574c:	7c00      	ldrb	r0, [r0, #16]
   d574e:	f7fe fe3f 	bl	d43d0 <HAL_USB_USART_Receive_Data>
}
   d5752:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5756:	bf28      	it	cs
   d5758:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d575c:	bd08      	pop	{r3, pc}

000d575e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d575e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5760:	7c00      	ldrb	r0, [r0, #16]
   d5762:	f7fe fe2d 	bl	d43c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d576a:	bd08      	pop	{r3, pc}

000d576c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d576c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d576e:	7c00      	ldrb	r0, [r0, #16]
   d5770:	f7fe fe1e 	bl	d43b0 <HAL_USB_USART_Available_Data>
}
   d5774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5778:	bd08      	pop	{r3, pc}

000d577a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d577a:	7c00      	ldrb	r0, [r0, #16]
   d577c:	f7fe be38 	b.w	d43f0 <HAL_USB_USART_Flush_Data>

000d5780 <_ZN9USBSerialD0Ev>:
   d5780:	b510      	push	{r4, lr}
   d5782:	2114      	movs	r1, #20
   d5784:	4604      	mov	r4, r0
   d5786:	f000 f928 	bl	d59da <_ZdlPvj>
   d578a:	4620      	mov	r0, r4
   d578c:	bd10      	pop	{r4, pc}

000d578e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d578e:	b538      	push	{r3, r4, r5, lr}
   d5790:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5792:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5794:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5796:	f7fe fe13 	bl	d43c0 <HAL_USB_USART_Available_Data_For_Write>
   d579a:	2800      	cmp	r0, #0
   d579c:	dc01      	bgt.n	d57a2 <_ZN9USBSerial5writeEh+0x14>
   d579e:	7c60      	ldrb	r0, [r4, #17]
   d57a0:	b128      	cbz	r0, d57ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d57a2:	4629      	mov	r1, r5
   d57a4:	7c20      	ldrb	r0, [r4, #16]
   d57a6:	f7fe fe1b 	bl	d43e0 <HAL_USB_USART_Send_Data>
   d57aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d57ae:	bd38      	pop	{r3, r4, r5, pc}

000d57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57b0:	b510      	push	{r4, lr}
   d57b2:	4604      	mov	r4, r0
   d57b4:	2300      	movs	r3, #0
   d57b6:	6063      	str	r3, [r4, #4]
   d57b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57bc:	60a3      	str	r3, [r4, #8]
   d57be:	4b05      	ldr	r3, [pc, #20]	; (d57d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d57c0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d57c2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57c4:	4608      	mov	r0, r1
{
  _serial = serial;
   d57c6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d57c8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d57ca:	4611      	mov	r1, r2
   d57cc:	f7fe fde0 	bl	d4390 <HAL_USB_USART_Init>
}
   d57d0:	4620      	mov	r0, r4
   d57d2:	bd10      	pop	{r4, pc}
   d57d4:	000d6058 	.word	0x000d6058

000d57d8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d57d8:	2200      	movs	r2, #0
   d57da:	7c00      	ldrb	r0, [r0, #16]
   d57dc:	f7fe bde0 	b.w	d43a0 <HAL_USB_USART_Begin>

000d57e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d57e2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d57e6:	2100      	movs	r1, #0
   d57e8:	f000 fa86 	bl	d5cf8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d57f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57f2:	4d0e      	ldr	r5, [pc, #56]	; (d582c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d57f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d57f6:	a801      	add	r0, sp, #4
   d57f8:	f7ff fff2 	bl	d57e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57fc:	6829      	ldr	r1, [r5, #0]
   d57fe:	f011 0401 	ands.w	r4, r1, #1
   d5802:	d110      	bne.n	d5826 <_Z16_fetch_usbserialv+0x36>
   d5804:	4628      	mov	r0, r5
   d5806:	f7fe fc4e 	bl	d40a6 <__cxa_guard_acquire>
   d580a:	b160      	cbz	r0, d5826 <_Z16_fetch_usbserialv+0x36>
   d580c:	aa01      	add	r2, sp, #4
   d580e:	4621      	mov	r1, r4
   d5810:	4807      	ldr	r0, [pc, #28]	; (d5830 <_Z16_fetch_usbserialv+0x40>)
   d5812:	f7ff ffcd 	bl	d57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5816:	4628      	mov	r0, r5
   d5818:	f7fe fc4a 	bl	d40b0 <__cxa_guard_release>
   d581c:	4a05      	ldr	r2, [pc, #20]	; (d5834 <_Z16_fetch_usbserialv+0x44>)
   d581e:	4906      	ldr	r1, [pc, #24]	; (d5838 <_Z16_fetch_usbserialv+0x48>)
   d5820:	4803      	ldr	r0, [pc, #12]	; (d5830 <_Z16_fetch_usbserialv+0x40>)
   d5822:	f000 f8d5 	bl	d59d0 <__aeabi_atexit>
	return _usbserial;
}
   d5826:	4802      	ldr	r0, [pc, #8]	; (d5830 <_Z16_fetch_usbserialv+0x40>)
   d5828:	b007      	add	sp, #28
   d582a:	bd30      	pop	{r4, r5, pc}
   d582c:	2003e704 	.word	0x2003e704
   d5830:	2003e708 	.word	0x2003e708
   d5834:	2003e4cc 	.word	0x2003e4cc
   d5838:	000d5731 	.word	0x000d5731

000d583c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d583c:	2200      	movs	r2, #0
   d583e:	4611      	mov	r1, r2
   d5840:	6840      	ldr	r0, [r0, #4]
   d5842:	f7fe be33 	b.w	d44ac <network_ready>

000d5846 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5846:	2200      	movs	r2, #0
   d5848:	4611      	mov	r1, r2
   d584a:	6840      	ldr	r0, [r0, #4]
   d584c:	f7fe be4e 	b.w	d44ec <network_listening>

000d5850 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5850:	2200      	movs	r2, #0
   d5852:	4611      	mov	r1, r2
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	f7fe be59 	b.w	d450c <network_get_listen_timeout>

000d585a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d585a:	2200      	movs	r2, #0
   d585c:	6840      	ldr	r0, [r0, #4]
   d585e:	f7fe be4d 	b.w	d44fc <network_set_listen_timeout>

000d5862 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5862:	2200      	movs	r2, #0
   d5864:	f081 0101 	eor.w	r1, r1, #1
   d5868:	6840      	ldr	r0, [r0, #4]
   d586a:	f7fe be37 	b.w	d44dc <network_listen>

000d586e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d586e:	2300      	movs	r3, #0
   d5870:	461a      	mov	r2, r3
   d5872:	4619      	mov	r1, r3
   d5874:	6840      	ldr	r0, [r0, #4]
   d5876:	f7fe be29 	b.w	d44cc <network_off>

000d587a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d587a:	2300      	movs	r3, #0
   d587c:	461a      	mov	r2, r3
   d587e:	4619      	mov	r1, r3
   d5880:	6840      	ldr	r0, [r0, #4]
   d5882:	f7fe be1b 	b.w	d44bc <network_on>

000d5886 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5886:	2200      	movs	r2, #0
   d5888:	4611      	mov	r1, r2
   d588a:	6840      	ldr	r0, [r0, #4]
   d588c:	f7fe bdfe 	b.w	d448c <network_connecting>

000d5890 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5890:	2200      	movs	r2, #0
   d5892:	2102      	movs	r1, #2
   d5894:	6840      	ldr	r0, [r0, #4]
   d5896:	f7fe be01 	b.w	d449c <network_disconnect>

000d589a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d589a:	2300      	movs	r3, #0
   d589c:	461a      	mov	r2, r3
   d589e:	6840      	ldr	r0, [r0, #4]
   d58a0:	f7fe bdec 	b.w	d447c <network_connect>

000d58a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58a4:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58a6:	2204      	movs	r2, #4
   d58a8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58aa:	4a02      	ldr	r2, [pc, #8]	; (d58b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58ac:	601a      	str	r2, [r3, #0]
   d58ae:	4770      	bx	lr
   d58b0:	2003e71c 	.word	0x2003e71c
   d58b4:	000d6088 	.word	0x000d6088

000d58b8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d58b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58ba:	4b0c      	ldr	r3, [pc, #48]	; (d58ec <serialEventRun+0x34>)
   d58bc:	b133      	cbz	r3, d58cc <serialEventRun+0x14>
   d58be:	f7ff ff97 	bl	d57f0 <_Z16_fetch_usbserialv>
   d58c2:	6803      	ldr	r3, [r0, #0]
   d58c4:	691b      	ldr	r3, [r3, #16]
   d58c6:	4798      	blx	r3
   d58c8:	2800      	cmp	r0, #0
   d58ca:	dc09      	bgt.n	d58e0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d58cc:	4b08      	ldr	r3, [pc, #32]	; (d58f0 <serialEventRun+0x38>)
   d58ce:	b163      	cbz	r3, d58ea <serialEventRun+0x32>
   d58d0:	f7ff feec 	bl	d56ac <_Z22__fetch_global_Serial1v>
   d58d4:	6803      	ldr	r3, [r0, #0]
   d58d6:	691b      	ldr	r3, [r3, #16]
   d58d8:	4798      	blx	r3
   d58da:	2800      	cmp	r0, #0
   d58dc:	dc03      	bgt.n	d58e6 <serialEventRun+0x2e>
   d58de:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d58e0:	f3af 8000 	nop.w
   d58e4:	e7f2      	b.n	d58cc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d58e6:	f3af 8000 	nop.w
   d58ea:	bd08      	pop	{r3, pc}
	...

000d58f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d58f4:	b508      	push	{r3, lr}
	serialEventRun();
   d58f6:	f7ff ffdf 	bl	d58b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d58fa:	f7fe fc69 	bl	d41d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d58fe:	4b01      	ldr	r3, [pc, #4]	; (d5904 <_post_loop+0x10>)
   d5900:	6018      	str	r0, [r3, #0]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	2003e728 	.word	0x2003e728

000d5908 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5908:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d590a:	2300      	movs	r3, #0
   d590c:	9300      	str	r3, [sp, #0]
   d590e:	461a      	mov	r2, r3
   d5910:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5914:	f7fe fd96 	bl	d4444 <system_ctrl_set_result>
}
   d5918:	b003      	add	sp, #12
   d591a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5920 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5920:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5922:	8843      	ldrh	r3, [r0, #2]
   d5924:	2b0a      	cmp	r3, #10
   d5926:	d008      	beq.n	d593a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5928:	2b50      	cmp	r3, #80	; 0x50
   d592a:	d109      	bne.n	d5940 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d592c:	4b09      	ldr	r3, [pc, #36]	; (d5954 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d592e:	681b      	ldr	r3, [r3, #0]
   d5930:	b13b      	cbz	r3, d5942 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5932:	b003      	add	sp, #12
   d5934:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5938:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d593a:	f7ff ffe5 	bl	d5908 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d593e:	e006      	b.n	d594e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5940:	2300      	movs	r3, #0
   d5942:	9300      	str	r3, [sp, #0]
   d5944:	461a      	mov	r2, r3
   d5946:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d594a:	f7fe fd7b 	bl	d4444 <system_ctrl_set_result>
        break;
    }
}
   d594e:	b003      	add	sp, #12
   d5950:	f85d fb04 	ldr.w	pc, [sp], #4
   d5954:	2003e724 	.word	0x2003e724

000d5958 <module_user_init_hook>:

void module_user_init_hook()
{
   d5958:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d595a:	f7fe fc29 	bl	d41b0 <HAL_RNG_GetRandomNumber>
   d595e:	4604      	mov	r4, r0
    srand(seed);
   d5960:	f000 f9d2 	bl	d5d08 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5964:	4b07      	ldr	r3, [pc, #28]	; (d5984 <module_user_init_hook+0x2c>)
   d5966:	b113      	cbz	r3, d596e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5968:	4620      	mov	r0, r4
   d596a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d596e:	2100      	movs	r1, #0
   d5970:	4804      	ldr	r0, [pc, #16]	; (d5984 <module_user_init_hook+0x2c>)
   d5972:	f7fe fd7b 	bl	d446c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5976:	2100      	movs	r1, #0
   d5978:	4803      	ldr	r0, [pc, #12]	; (d5988 <module_user_init_hook+0x30>)
}
   d597a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d597e:	f7fe bd57 	b.w	d4430 <system_ctrl_set_app_request_handler>
   d5982:	bf00      	nop
   d5984:	00000000 	.word	0x00000000
   d5988:	000d5921 	.word	0x000d5921

000d598c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d598c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d598e:	4c0c      	ldr	r4, [pc, #48]	; (d59c0 <_GLOBAL__sub_I_SPI+0x34>)
   d5990:	4e0c      	ldr	r6, [pc, #48]	; (d59c4 <_GLOBAL__sub_I_SPI+0x38>)
   d5992:	4d0d      	ldr	r5, [pc, #52]	; (d59c8 <_GLOBAL__sub_I_SPI+0x3c>)
   d5994:	2100      	movs	r1, #0
   d5996:	4620      	mov	r0, r4
   d5998:	f7ff fabc 	bl	d4f14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d599c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d599e:	4c0b      	ldr	r4, [pc, #44]	; (d59cc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d59a0:	4632      	mov	r2, r6
   d59a2:	4629      	mov	r1, r5
   d59a4:	f000 f814 	bl	d59d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d59a8:	2101      	movs	r1, #1
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff fab2 	bl	d4f14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d59b0:	4632      	mov	r2, r6
   d59b2:	4629      	mov	r1, r5
   d59b4:	4620      	mov	r0, r4
   d59b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d59ba:	f000 b809 	b.w	d59d0 <__aeabi_atexit>
   d59be:	bf00      	nop
   d59c0:	2003e72c 	.word	0x2003e72c
   d59c4:	2003e4cc 	.word	0x2003e4cc
   d59c8:	000d4f05 	.word	0x000d4f05
   d59cc:	2003e73c 	.word	0x2003e73c

000d59d0 <__aeabi_atexit>:
   d59d0:	460b      	mov	r3, r1
   d59d2:	4601      	mov	r1, r0
   d59d4:	4618      	mov	r0, r3
   d59d6:	f000 b967 	b.w	d5ca8 <__cxa_atexit>

000d59da <_ZdlPvj>:
   d59da:	f7fe bb60 	b.w	d409e <_ZdlPv>
	...

000d59e0 <_ZSt15get_new_handlerv>:
   d59e0:	4b02      	ldr	r3, [pc, #8]	; (d59ec <_ZSt15get_new_handlerv+0xc>)
   d59e2:	6818      	ldr	r0, [r3, #0]
   d59e4:	f3bf 8f5f 	dmb	sy
   d59e8:	4770      	bx	lr
   d59ea:	bf00      	nop
   d59ec:	2003e74c 	.word	0x2003e74c

000d59f0 <_ZnwjRKSt9nothrow_t>:
   d59f0:	b510      	push	{r4, lr}
   d59f2:	2800      	cmp	r0, #0
   d59f4:	bf14      	ite	ne
   d59f6:	4604      	movne	r4, r0
   d59f8:	2401      	moveq	r4, #1
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7fe fd8e 	bl	d451c <malloc>
   d5a00:	b920      	cbnz	r0, d5a0c <_ZnwjRKSt9nothrow_t+0x1c>
   d5a02:	f7ff ffed 	bl	d59e0 <_ZSt15get_new_handlerv>
   d5a06:	b108      	cbz	r0, d5a0c <_ZnwjRKSt9nothrow_t+0x1c>
   d5a08:	4780      	blx	r0
   d5a0a:	e7f6      	b.n	d59fa <_ZnwjRKSt9nothrow_t+0xa>
   d5a0c:	bd10      	pop	{r4, pc}

000d5a0e <_ZnajRKSt9nothrow_t>:
   d5a0e:	f7ff bfef 	b.w	d59f0 <_ZnwjRKSt9nothrow_t>

000d5a12 <_ZSt25__throw_bad_function_callv>:
   d5a12:	b508      	push	{r3, lr}
   d5a14:	f7fe fd9a 	bl	d454c <abort>

000d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5a18:	4b24      	ldr	r3, [pc, #144]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5a1a:	681a      	ldr	r2, [r3, #0]
   d5a1c:	07d0      	lsls	r0, r2, #31
   d5a1e:	bf5c      	itt	pl
   d5a20:	2201      	movpl	r2, #1
   d5a22:	601a      	strpl	r2, [r3, #0]
   d5a24:	4b22      	ldr	r3, [pc, #136]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5a26:	681a      	ldr	r2, [r3, #0]
   d5a28:	07d1      	lsls	r1, r2, #31
   d5a2a:	bf5c      	itt	pl
   d5a2c:	2201      	movpl	r2, #1
   d5a2e:	601a      	strpl	r2, [r3, #0]
   d5a30:	4b20      	ldr	r3, [pc, #128]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d2      	lsls	r2, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b1e      	ldr	r3, [pc, #120]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d0      	lsls	r0, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b1c      	ldr	r3, [pc, #112]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d1      	lsls	r1, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b1a      	ldr	r3, [pc, #104]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d2      	lsls	r2, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b18      	ldr	r3, [pc, #96]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d0      	lsls	r0, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b16      	ldr	r3, [pc, #88]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d1      	lsls	r1, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b14      	ldr	r3, [pc, #80]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d2      	lsls	r2, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b12      	ldr	r3, [pc, #72]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d0      	lsls	r0, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b10      	ldr	r3, [pc, #64]	; (d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d1      	lsls	r1, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4b0e      	ldr	r3, [pc, #56]	; (d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d2      	lsls	r2, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4770      	bx	lr
   d5aaa:	bf00      	nop
   d5aac:	2003e77c 	.word	0x2003e77c
   d5ab0:	2003e778 	.word	0x2003e778
   d5ab4:	2003e774 	.word	0x2003e774
   d5ab8:	2003e770 	.word	0x2003e770
   d5abc:	2003e76c 	.word	0x2003e76c
   d5ac0:	2003e768 	.word	0x2003e768
   d5ac4:	2003e764 	.word	0x2003e764
   d5ac8:	2003e760 	.word	0x2003e760
   d5acc:	2003e75c 	.word	0x2003e75c
   d5ad0:	2003e758 	.word	0x2003e758
   d5ad4:	2003e754 	.word	0x2003e754
   d5ad8:	2003e750 	.word	0x2003e750

000d5adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5adc:	4b18      	ldr	r3, [pc, #96]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ade:	681a      	ldr	r2, [r3, #0]
   d5ae0:	07d1      	lsls	r1, r2, #31
   d5ae2:	bf5c      	itt	pl
   d5ae4:	2201      	movpl	r2, #1
   d5ae6:	601a      	strpl	r2, [r3, #0]
   d5ae8:	4b16      	ldr	r3, [pc, #88]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5aea:	681a      	ldr	r2, [r3, #0]
   d5aec:	07d2      	lsls	r2, r2, #31
   d5aee:	bf5c      	itt	pl
   d5af0:	2201      	movpl	r2, #1
   d5af2:	601a      	strpl	r2, [r3, #0]
   d5af4:	4b14      	ldr	r3, [pc, #80]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5af6:	681a      	ldr	r2, [r3, #0]
   d5af8:	07d0      	lsls	r0, r2, #31
   d5afa:	bf5c      	itt	pl
   d5afc:	2201      	movpl	r2, #1
   d5afe:	601a      	strpl	r2, [r3, #0]
   d5b00:	4b12      	ldr	r3, [pc, #72]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b02:	681a      	ldr	r2, [r3, #0]
   d5b04:	07d1      	lsls	r1, r2, #31
   d5b06:	bf5c      	itt	pl
   d5b08:	2201      	movpl	r2, #1
   d5b0a:	601a      	strpl	r2, [r3, #0]
   d5b0c:	4b10      	ldr	r3, [pc, #64]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b0e:	681a      	ldr	r2, [r3, #0]
   d5b10:	07d2      	lsls	r2, r2, #31
   d5b12:	bf5c      	itt	pl
   d5b14:	2201      	movpl	r2, #1
   d5b16:	601a      	strpl	r2, [r3, #0]
   d5b18:	4b0e      	ldr	r3, [pc, #56]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b1a:	681a      	ldr	r2, [r3, #0]
   d5b1c:	07d0      	lsls	r0, r2, #31
   d5b1e:	bf5c      	itt	pl
   d5b20:	2201      	movpl	r2, #1
   d5b22:	601a      	strpl	r2, [r3, #0]
   d5b24:	4b0c      	ldr	r3, [pc, #48]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b26:	681a      	ldr	r2, [r3, #0]
   d5b28:	07d1      	lsls	r1, r2, #31
   d5b2a:	bf5c      	itt	pl
   d5b2c:	2201      	movpl	r2, #1
   d5b2e:	601a      	strpl	r2, [r3, #0]
   d5b30:	4b0a      	ldr	r3, [pc, #40]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b32:	681a      	ldr	r2, [r3, #0]
   d5b34:	07d2      	lsls	r2, r2, #31
   d5b36:	bf5c      	itt	pl
   d5b38:	2201      	movpl	r2, #1
   d5b3a:	601a      	strpl	r2, [r3, #0]
   d5b3c:	4770      	bx	lr
   d5b3e:	bf00      	nop
   d5b40:	2003e79c 	.word	0x2003e79c
   d5b44:	2003e798 	.word	0x2003e798
   d5b48:	2003e794 	.word	0x2003e794
   d5b4c:	2003e790 	.word	0x2003e790
   d5b50:	2003e78c 	.word	0x2003e78c
   d5b54:	2003e788 	.word	0x2003e788
   d5b58:	2003e784 	.word	0x2003e784
   d5b5c:	2003e780 	.word	0x2003e780

000d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b60:	4b18      	ldr	r3, [pc, #96]	; (d5bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d1      	lsls	r1, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4b16      	ldr	r3, [pc, #88]	; (d5bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b6e:	681a      	ldr	r2, [r3, #0]
   d5b70:	07d2      	lsls	r2, r2, #31
   d5b72:	bf5c      	itt	pl
   d5b74:	2201      	movpl	r2, #1
   d5b76:	601a      	strpl	r2, [r3, #0]
   d5b78:	4b14      	ldr	r3, [pc, #80]	; (d5bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d0      	lsls	r0, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b12      	ldr	r3, [pc, #72]	; (d5bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d1      	lsls	r1, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b10      	ldr	r3, [pc, #64]	; (d5bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d2      	lsls	r2, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b0e      	ldr	r3, [pc, #56]	; (d5bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d0      	lsls	r0, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b0c      	ldr	r3, [pc, #48]	; (d5bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d1      	lsls	r1, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b0a      	ldr	r3, [pc, #40]	; (d5be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d2      	lsls	r2, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4770      	bx	lr
   d5bc2:	bf00      	nop
   d5bc4:	2003e7bc 	.word	0x2003e7bc
   d5bc8:	2003e7b8 	.word	0x2003e7b8
   d5bcc:	2003e7b4 	.word	0x2003e7b4
   d5bd0:	2003e7b0 	.word	0x2003e7b0
   d5bd4:	2003e7ac 	.word	0x2003e7ac
   d5bd8:	2003e7a8 	.word	0x2003e7a8
   d5bdc:	2003e7a4 	.word	0x2003e7a4
   d5be0:	2003e7a0 	.word	0x2003e7a0

000d5be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5be4:	4b24      	ldr	r3, [pc, #144]	; (d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d0      	lsls	r0, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b22      	ldr	r3, [pc, #136]	; (d5c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d1      	lsls	r1, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b20      	ldr	r3, [pc, #128]	; (d5c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d2      	lsls	r2, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b1e      	ldr	r3, [pc, #120]	; (d5c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d0      	lsls	r0, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4b1c      	ldr	r3, [pc, #112]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	07d1      	lsls	r1, r2, #31
   d5c1a:	bf5c      	itt	pl
   d5c1c:	2201      	movpl	r2, #1
   d5c1e:	601a      	strpl	r2, [r3, #0]
   d5c20:	4b1a      	ldr	r3, [pc, #104]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d2      	lsls	r2, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4b18      	ldr	r3, [pc, #96]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d0      	lsls	r0, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4b16      	ldr	r3, [pc, #88]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c3a:	681a      	ldr	r2, [r3, #0]
   d5c3c:	07d1      	lsls	r1, r2, #31
   d5c3e:	bf5c      	itt	pl
   d5c40:	2201      	movpl	r2, #1
   d5c42:	601a      	strpl	r2, [r3, #0]
   d5c44:	4b14      	ldr	r3, [pc, #80]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d2      	lsls	r2, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b12      	ldr	r3, [pc, #72]	; (d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d0      	lsls	r0, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b10      	ldr	r3, [pc, #64]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d1      	lsls	r1, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b0e      	ldr	r3, [pc, #56]	; (d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d2      	lsls	r2, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4770      	bx	lr
   d5c76:	bf00      	nop
   d5c78:	2003e7ec 	.word	0x2003e7ec
   d5c7c:	2003e7e8 	.word	0x2003e7e8
   d5c80:	2003e7e4 	.word	0x2003e7e4
   d5c84:	2003e7e0 	.word	0x2003e7e0
   d5c88:	2003e7dc 	.word	0x2003e7dc
   d5c8c:	2003e7d8 	.word	0x2003e7d8
   d5c90:	2003e7d4 	.word	0x2003e7d4
   d5c94:	2003e7d0 	.word	0x2003e7d0
   d5c98:	2003e7cc 	.word	0x2003e7cc
   d5c9c:	2003e7c8 	.word	0x2003e7c8
   d5ca0:	2003e7c4 	.word	0x2003e7c4
   d5ca4:	2003e7c0 	.word	0x2003e7c0

000d5ca8 <__cxa_atexit>:
   d5ca8:	b510      	push	{r4, lr}
   d5caa:	4c05      	ldr	r4, [pc, #20]	; (d5cc0 <__cxa_atexit+0x18>)
   d5cac:	4613      	mov	r3, r2
   d5cae:	b12c      	cbz	r4, d5cbc <__cxa_atexit+0x14>
   d5cb0:	460a      	mov	r2, r1
   d5cb2:	4601      	mov	r1, r0
   d5cb4:	2002      	movs	r0, #2
   d5cb6:	f3af 8000 	nop.w
   d5cba:	bd10      	pop	{r4, pc}
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	bd10      	pop	{r4, pc}
   d5cc0:	00000000 	.word	0x00000000

000d5cc4 <memcmp>:
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	3901      	subs	r1, #1
   d5cc8:	4402      	add	r2, r0
   d5cca:	4290      	cmp	r0, r2
   d5ccc:	d007      	beq.n	d5cde <memcmp+0x1a>
   d5cce:	f810 3b01 	ldrb.w	r3, [r0], #1
   d5cd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5cd6:	42a3      	cmp	r3, r4
   d5cd8:	d0f7      	beq.n	d5cca <memcmp+0x6>
   d5cda:	1b18      	subs	r0, r3, r4
   d5cdc:	bd10      	pop	{r4, pc}
   d5cde:	2000      	movs	r0, #0
   d5ce0:	bd10      	pop	{r4, pc}

000d5ce2 <memcpy>:
   d5ce2:	b510      	push	{r4, lr}
   d5ce4:	1e43      	subs	r3, r0, #1
   d5ce6:	440a      	add	r2, r1
   d5ce8:	4291      	cmp	r1, r2
   d5cea:	d004      	beq.n	d5cf6 <memcpy+0x14>
   d5cec:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5cf4:	e7f8      	b.n	d5ce8 <memcpy+0x6>
   d5cf6:	bd10      	pop	{r4, pc}

000d5cf8 <memset>:
   d5cf8:	4402      	add	r2, r0
   d5cfa:	4603      	mov	r3, r0
   d5cfc:	4293      	cmp	r3, r2
   d5cfe:	d002      	beq.n	d5d06 <memset+0xe>
   d5d00:	f803 1b01 	strb.w	r1, [r3], #1
   d5d04:	e7fa      	b.n	d5cfc <memset+0x4>
   d5d06:	4770      	bx	lr

000d5d08 <srand>:
   d5d08:	b538      	push	{r3, r4, r5, lr}
   d5d0a:	4b12      	ldr	r3, [pc, #72]	; (d5d54 <srand+0x4c>)
   d5d0c:	681c      	ldr	r4, [r3, #0]
   d5d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d10:	4605      	mov	r5, r0
   d5d12:	b9d3      	cbnz	r3, d5d4a <srand+0x42>
   d5d14:	2018      	movs	r0, #24
   d5d16:	f7fe fc01 	bl	d451c <malloc>
   d5d1a:	f243 330e 	movw	r3, #13070	; 0x330e
   d5d1e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5d20:	8003      	strh	r3, [r0, #0]
   d5d22:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5d26:	8043      	strh	r3, [r0, #2]
   d5d28:	f241 2334 	movw	r3, #4660	; 0x1234
   d5d2c:	8083      	strh	r3, [r0, #4]
   d5d2e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5d32:	80c3      	strh	r3, [r0, #6]
   d5d34:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5d38:	8103      	strh	r3, [r0, #8]
   d5d3a:	2305      	movs	r3, #5
   d5d3c:	8143      	strh	r3, [r0, #10]
   d5d3e:	230b      	movs	r3, #11
   d5d40:	8183      	strh	r3, [r0, #12]
   d5d42:	2201      	movs	r2, #1
   d5d44:	2300      	movs	r3, #0
   d5d46:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	611d      	str	r5, [r3, #16]
   d5d50:	615a      	str	r2, [r3, #20]
   d5d52:	bd38      	pop	{r3, r4, r5, pc}
   d5d54:	2003e4c8 	.word	0x2003e4c8

000d5d58 <strlen>:
   d5d58:	4603      	mov	r3, r0
   d5d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5d5e:	2a00      	cmp	r2, #0
   d5d60:	d1fb      	bne.n	d5d5a <strlen+0x2>
   d5d62:	1a18      	subs	r0, r3, r0
   d5d64:	3801      	subs	r0, #1
   d5d66:	4770      	bx	lr

000d5d68 <strnlen>:
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	4603      	mov	r3, r0
   d5d6c:	4401      	add	r1, r0
   d5d6e:	428b      	cmp	r3, r1
   d5d70:	d004      	beq.n	d5d7c <strnlen+0x14>
   d5d72:	781a      	ldrb	r2, [r3, #0]
   d5d74:	1c5c      	adds	r4, r3, #1
   d5d76:	b10a      	cbz	r2, d5d7c <strnlen+0x14>
   d5d78:	4623      	mov	r3, r4
   d5d7a:	e7f8      	b.n	d5d6e <strnlen+0x6>
   d5d7c:	1a18      	subs	r0, r3, r0
   d5d7e:	bd10      	pop	{r4, pc}

000d5d80 <dynalib_user>:
   d5d80:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5d90:	0000 0000 6548 6c6c 206f 6e49 7473 6761     ....Hello Instag
   d5da0:	6172 216d 6900 6667 6c6f 6f6c 6577 7372     ram!.igfollowers
   d5db0:	0000 0000                                   ....

000d5db4 <_ZTVN5spark13EthernetClassE>:
	...
   d5dbc:	45e5 000d 45db 000d 45d1 000d 45c7 000d     .E...E...E...E..
   d5dcc:	45bb 000d 45af 000d 45a3 000d 459b 000d     .E...E...E...E..
   d5ddc:	4591 000d 4587 000d 4d21 000d               .E...E..!M..

000d5de8 <_ZTV9IPAddress>:
	...
   d5df0:	4615 000d 4605 000d 4607 000d 6162 6475     .F...F...F..baud
   d5e00:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5e10:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5e20:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5e30:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5e40:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5e50:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5e60:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5e70:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d5e80:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d5e90:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d5ea0:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d5eb0:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d5ec0:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d5ed0:	6170 696e 0063 6c61 006c 0000               panic.all...

000d5edc <_ZTVN5spark9MeshClassE>:
	...
   d5ee4:	47b9 000d 47af 000d 47a5 000d 479b 000d     .G...G...G...G..
   d5ef4:	478f 000d 4783 000d 4777 000d 476f 000d     .G...G..wG..oG..
   d5f04:	4765 000d 475b 000d 4d21 000d 6666 3330     eG..[G..!M..ff03
   d5f14:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d5f24:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d5f34:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d5f40 <_ZTVN5spark12NetworkClassE>:
	...
   d5f48:	4cb9 000d 4cc3 000d 4ccd 000d 4cd7 000d     .L...L...L...L..
   d5f58:	4ce1 000d 4ced 000d 4cf9 000d 4d05 000d     .L...L...L...M..
   d5f68:	4d0d 000d 4d17 000d 4d21 000d               .M...M..!M..

000d5f74 <_ZTV8SPIClass>:
	...
   d5f7c:	4f05 000d 4f07 000d 005a 2b25 3330 3a64     .O...O..Z.%+03d:
   d5f8c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d5f9c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d5fac:	0000 0000                                   ....

000d5fb0 <_ZTV3UDP>:
	...
   d5fb8:	55ad 000d 55d1 000d 4f89 000d 50b3 000d     .U...U...O...P..
   d5fc8:	4f81 000d 4f9f 000d 4fbd 000d 4fd7 000d     .O...O...O...O..
   d5fd8:	4ffb 000d 5097 000d 5399 000d 5139 000d     .O...P...S..9Q..
   d5fe8:	52b9 000d 4f69 000d 5541 000d 523d 000d     .R..iO..AU..=R..
   d5ff8:	5171 000d 556f 000d 50dd 000d 4f77 000d     qQ..oU...P..wO..
   d6008:	5119 000d 4f7d 000d 4fd9 000d fff0 ffff     .Q..}O...O......
   d6018:	0000 0000 4ff3 000d                         .....O..

000d6020 <_ZTV11USARTSerial>:
	...
   d6028:	55fd 000d 564d 000d 565b 000d 4e01 000d     .U..MV..[V...N..
   d6038:	5611 000d 5633 000d 561f 000d 5647 000d     .V..3V...V..GV..
   d6048:	55ff 000d 5603 000d                         .U...V..

000d6050 <_ZTV9USBSerial>:
	...
   d6058:	5731 000d 5781 000d 578f 000d 4e01 000d     1W...W...W...N..
   d6068:	576d 000d 5733 000d 5749 000d 577b 000d     mW..3W..IW..{W..
   d6078:	575f 000d 572d 000d                         _W..-W..

000d6080 <_ZTVN5spark9WiFiClassE>:
	...
   d6088:	589b 000d 5891 000d 5887 000d 583d 000d     .X...X...X..=X..
   d6098:	587b 000d 586f 000d 5863 000d 585b 000d     {X..oX..cX..[X..
   d60a8:	5851 000d 5847 000d 4d21 000d               QX..GX..!M..

000d60b4 <_ZSt7nothrow>:
   d60b4:	0000 0000                                   ....

000d60b8 <__sf_fake_stdin>:
	...

000d60d8 <__sf_fake_stdout>:
	...

000d60f8 <__sf_fake_stderr>:
	...
   d6118:	0043                                        C.

000d611a <link_const_variable_data_end>:
	...

000d611c <link_constructors_location>:
   d611c:	000d411b 	.word	0x000d411b
   d6120:	000d4565 	.word	0x000d4565
   d6124:	000d45f1 	.word	0x000d45f1
   d6128:	000d471d 	.word	0x000d471d
   d612c:	000d4c69 	.word	0x000d4c69
   d6130:	000d4ded 	.word	0x000d4ded
   d6134:	000d4ee9 	.word	0x000d4ee9
   d6138:	000d4f3d 	.word	0x000d4f3d
   d613c:	000d4f55 	.word	0x000d4f55
   d6140:	000d58a5 	.word	0x000d58a5
   d6144:	000d598d 	.word	0x000d598d
   d6148:	000d5a19 	.word	0x000d5a19
   d614c:	000d5add 	.word	0x000d5add
   d6150:	000d5b61 	.word	0x000d5b61
   d6154:	000d5be5 	.word	0x000d5be5

000d6158 <link_constructors_end>:
	...
